<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FoolishTalk</title>
    <description></description>
    <link>http://www.foolishtalk.org/</link>
    <atom:link href="http://www.foolishtalk.org/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 08 Dec 2019 11:17:24 +0800</pubDate>
    <lastBuildDate>Sun, 08 Dec 2019 11:17:24 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>pip折腾记</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;最近在公司的新电脑上，要用到一个python2编写的库，发现python版本默认已经是3.0了，pip也是默认使用pip3，但是网上很多是使用pip去安装环境，为了折腾这个环境，花了好长时间，记录一下。&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;
&lt;p&gt;pip安装先把安装的脚本下载下来：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget curl https://bootstrap.pypa.io/get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果默认的是python3，需要用指定python版本：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;python2.7 get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;安装的过程中，会发现各种超时，原因是要翻墙。我是通过privoxy实现http代理，如果环境没装，自己安装一下：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;privoxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果brew安装太慢。。。再挂下代理：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export ALL_PROXY=socks5://127.0.0.1:portnumber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在配置文件&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/etc/privoxy/config&lt;/code&gt;下面加上监听的端口号，以及本地socks5代理的端口号：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;listen-address 0.0.0.0:8118
forward-socks5 / localhost:1080 .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;启动privoxy：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; /usr/local/sbin/privoxy /usr/local/etc/privoxy/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;检查是否启动成功：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat &lt;span class=&quot;nt&quot;&gt;-na&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;8118
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;将 socks5 代理转化成 http 代理：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;http_proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost:8118'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;https_proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://localhost:8118'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果嫌每次设置麻烦，可以把这两行加在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.bash_profile&lt;/code&gt;下。
不想使用可以通过下面的命令取消：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;http_proxy
&lt;span class=&quot;nb&quot;&gt;unset &lt;/span&gt;https_proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考链接：&lt;br /&gt;
&lt;a href=&quot;https://www.zhihu.com/question/31360766/answer/149140490&quot;&gt;Homebrew有比较快的源（mirror）吗？ - skytraveler的回答 - 知乎&lt;/a&gt;
&lt;a href=&quot;https://double-c.github.io/2018/10/17/mac-ss-cmd/index.html&quot;&gt;Mac命令行终端下使用shadowsocks翻墙&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/12/07/pip%E6%8A%98%E8%85%BE%E8%AE%B0/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/12/07/pip%E6%8A%98%E8%85%BE%E8%AE%B0/</guid>
        
        <category>iOS</category>
        
        <category>Python</category>
        
        
      </item>
    
      <item>
        <title>使用Magellan修改iOS定位</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;最初写的&lt;a href=&quot;https://apps.apple.com/cn/app/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/id1459663647?mt=12&quot;&gt;虚拟定位&lt;/a&gt;，需要依赖 Xcode 搭配使用，对用户使用造成很大的学习成本，但是由于沙盒机制，在AppStore下载没有办法做到。&lt;/p&gt;

&lt;p&gt;于是，我做了 Magellan&lt;/p&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;
&lt;p&gt;虚拟定位在这里&lt;a href=&quot;https://apps.apple.com/cn/app/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/id1459663647?mt=12&quot;&gt;下载&lt;/a&gt;
Magellan 可以通过这里&lt;a href=&quot;https://pan.baidu.com/s/14TwkfSDZRHjVNUvAmk5cXw&quot;&gt;下载&lt;/a&gt;  提取码：jy4e&lt;/p&gt;

&lt;p&gt;Magellan 的使用方式很简单，下载后，把 App 拖进 应用程序文件夹中，
&lt;img src=&quot;http://images.foolishtalk.org/20191022225610.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
然后双击运行，就可以了。&lt;br /&gt;
有可能会出现这个弹窗，直接打开就好了。&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/20191022105549.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果出现无法打开，因为无法确认开发者的身份的弹窗时，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;系统偏好设置-通用&lt;/code&gt;下方找到，点击仍要继续运行即可。&lt;/p&gt;

&lt;p&gt;运行成功后，状态栏上方会出现一顶小帽子图标。&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/bc9e8955850855ca07147e65957f8087.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先手机要连接电脑，然后选择设备，然后再点击安装驱动，如果出现“安装成功”或者“可能已经安装过，无法再次安装”，可以跳过这一步。
如果等待超过2分钟没有反应，点击日志，会在桌面上生成一个“虚拟定位日志.txt”，可以通过邮箱zykzzzz@hotmail.com或者&lt;a href=&quot;https://weibo.com/u/2095454814&quot;&gt;微博&lt;/a&gt;联系到我，我会尽快帮你解决问题。&lt;/p&gt;

&lt;p&gt;接下来，在使用虚拟定位的时候，只需要把手机连接上电脑，勾选键盘模式（目前这种方式仅支持键盘模式），双击虚拟定位App上的地图，就会发现手机上的定位已经被修改。
&lt;img src=&quot;http://images.foolishtalk.org/f6f4ce34c5e2dfdb8d281c60950ea5c0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;拿来改定位（玩游戏/打卡）会不会被封？&lt;br /&gt;
不要出现瞬移非常严重的情况，从目前技术手段上无法判定，所以可以放心使用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提示“暂不支持 xx 版本，请联系作者升级”，怎么办？&lt;br /&gt;
如果你之前已经安装过驱动了，就不需要管这个提示，依然可以正常使用，如果是从来没有安装过的，出现这个提示，请联系我，我会更新新的版本解决这个问题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 04 Dec 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/12/04/magellan/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/12/04/magellan/</guid>
        
        <category>iOS</category>
        
        <category>Xcode</category>
        
        
      </item>
    
      <item>
        <title>在Mac app上执行AppleScript</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;前段时间我开发了&lt;a href=&quot;https://itunes.apple.com/cn/app/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/id1459663647?mt=12&quot;&gt;虚拟定位&lt;/a&gt;，一脚踩进了&lt;code class=&quot;highlighter-rouge&quot;&gt;AppleScript&lt;/code&gt;的坑里无法自拔。&lt;/p&gt;

&lt;h1 id=&quot;applescript&quot;&gt;AppleScript&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppleScript&lt;/code&gt;它是什么？&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AppleScript&lt;/code&gt;它是苹果提供在Mac OS上实现自动化的脚本语言，语法相对简单、易懂，类似英语语法。下面这段代码，你可以通过 Mac 自带的脚本编辑器运行：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/apple-script-editor-1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;运行后它会打开 iTunes ：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tell application &lt;span class=&quot;s2&quot;&gt;&quot;iTunes&quot;&lt;/span&gt;
	play
end tell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这三行可以简单的理解为：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;告诉 iTunes
    播放
结束
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tell application &quot;xxx&quot;&lt;/code&gt; 如果你是想让微信 App做点什么，就是&lt;code class=&quot;highlighter-rouge&quot;&gt;tell application &quot;微信&quot;&lt;/code&gt;,而&lt;code class=&quot;highlighter-rouge&quot;&gt;play&lt;/code&gt;这个事件，是iTunes独有的，怎么能知道app特有的事件？你可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;脚本编辑器&lt;/code&gt;的导航栏中按照以下步骤找到：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/apple-script-editor-2.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
然后选择&lt;code class=&quot;highlighter-rouge&quot;&gt;iTunes&lt;/code&gt;:&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/apple-script-editor-3.png&quot; alt=&quot;&quot; /&gt; &lt;br /&gt;
这里可以看到关于play事件的一些描述。&lt;br /&gt;
在编写Mac app之前，可以先通过脚本编辑器把我们想实现的功能调试好，然后再把脚本移到Mac app上，确保脚本是正确的，而不是因为App沙盒、权限等问题引起。&lt;/p&gt;

&lt;h1 id=&quot;system-events&quot;&gt;System Events&lt;/h1&gt;
&lt;p&gt;上面已经说到，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;tell application &quot;xxx&quot;&lt;/code&gt;这种方式去调用 App 允许的行为，如果你看完了上面的介绍，打算自己动手去做一些 App 自动化的事情，你会发现 App 提供的事件很少，甚至有可能没有，所以接下来讲的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;System Events&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;System Events&lt;/code&gt; 为我们提供了系统事件，允许我们模拟用户点击行为，可以说所有用户界面相关的操作，你都可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;System Events&lt;/code&gt; 去进行自动化操作。&lt;/p&gt;

&lt;p&gt;下面这一段就是通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;System Events&lt;/code&gt; 启动 &lt;code class=&quot;highlighter-rouge&quot;&gt;Safari&lt;/code&gt; 然后通过菜单栏的选项卡，新建标签页。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tell application &lt;span class=&quot;s2&quot;&gt;&quot;Safari&quot;&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;# 打开Safari&lt;/span&gt;
	activate
	tell application &lt;span class=&quot;s2&quot;&gt;&quot;System Events&quot;&lt;/span&gt;
		tell process &lt;span class=&quot;s2&quot;&gt;&quot;Safari&quot;&lt;/span&gt;
			&lt;span class=&quot;c&quot;&gt;# 点击Safari菜单栏-文件-新建标签页&lt;/span&gt;
			click menu item &lt;span class=&quot;s2&quot;&gt;&quot;新建标签页&quot;&lt;/span&gt; of menu 1 of menu bar item &lt;span class=&quot;s2&quot;&gt;&quot;文件&quot;&lt;/span&gt; of menu bar 1
		end tell
	end tell
end tell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;mac-app-调用-applescript-的方式&quot;&gt;Mac App 调用 AppleScript 的方式&lt;/h1&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;NSAppleScript&lt;/code&gt; 运行以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;        let source = &quot;&quot;&quot;
tell application &quot;Safari&quot;
    # 打开Safari
    activate
    tell application &quot;System Events&quot;
        tell process &quot;Safari&quot;
            # 点击Safari菜单栏-文件-新建标签页
            click menu item &quot;新建标签页&quot; of menu 1 of menu bar item &quot;文件&quot; of menu bar 1
        end tell
    end tell
end tell
&quot;&quot;&quot;
        let script = NSAppleScript(source: source)!
        var error : NSDictionary?
        script.executeAndReturnError(&amp;amp;error)
        print(error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;预期结果是正常的，但是会发现打印出了这样的错误：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2019-09-22 21:15:30.094229+0800 SwiftAppleScript[1453:42847] skipped scripting addition &quot;/Library/ScriptingAdditions/SASyphonInjector.osax&quot; because it is not SIP-protected.
Optional({
    NSAppleScriptErrorAppName = &quot;System Events&quot;;
    NSAppleScriptErrorBriefMessage = &quot;Not authorized to send Apple events to System Events.&quot;;
    NSAppleScriptErrorMessage = &quot;Not authorized to send Apple events to System Events.&quot;;
    NSAppleScriptErrorNumber = &quot;-1743&quot;;
    NSAppleScriptErrorRange = &quot;NSRange: {168, 69}&quot;;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个地方非常的坑，如果没有打印&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;,在没有打开&lt;code class=&quot;highlighter-rouge&quot;&gt;App Sanbox&lt;/code&gt;的情况下，是有可能预期效果是正常的，Safari能正常打开然后新建标签页。&lt;/p&gt;

&lt;p&gt;如果之前是做iOS开发的，对这个错误应该会很自然的有头绪，应该就是一些权限问题，直接在Info.plist上就能找到一个看起来是这个权限的字段，&lt;code class=&quot;highlighter-rouge&quot;&gt;Privacy - AppleEvents Sending Usage Description&lt;/code&gt;，把这个字段加上后，重新运行，发现多出了这个弹窗：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/2019-09-28.4.55.09.png&quot; alt=&quot;&quot; /&gt;
如果能够正常运行，那恭喜你，说明你没有打开&lt;code class=&quot;highlighter-rouge&quot;&gt;Capabilities&lt;/code&gt;-&amp;gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;App Sanbox&lt;/code&gt;
&lt;img src=&quot;http://images.foolishtalk.org/2EE70BF91F39368ACF74DD225DEF0EE0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;为什么要打开app-sanbox&quot;&gt;为什么要打开App Sanbox？&lt;/h1&gt;

&lt;p&gt;Mac OSX在10.6系统之后，为了防止恶意的App通过系统漏洞攻击系统，获取控制权限，要求上架的所有的App，都必须要开启沙盒。不要以为App安全离我们很远，Mac App一不留神就有可能被利用，System Events 就可以做到这个事情。&lt;/p&gt;

&lt;p&gt;讲回正题，当我们把 &lt;code class=&quot;highlighter-rouge&quot;&gt;App Sanbox&lt;/code&gt; 打开后，新的报错又来了：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Optional({
    NSAppleScriptErrorAppName = Safari;
    NSAppleScriptErrorBriefMessage = &quot;Application isn’t running.&quot;;
    NSAppleScriptErrorMessage = &quot;Safari got an error: Application isn’t running.&quot;;
    NSAppleScriptErrorNumber = &quot;-600&quot;;
    NSAppleScriptErrorRange = &quot;NSRange: {45, 8}&quot;;
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/2019110_IMG_2412.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这次是提示 &lt;code class=&quot;highlighter-rouge&quot;&gt;Safari&lt;/code&gt; 没有运行，我们的代码里已经加了让 &lt;code class=&quot;highlighter-rouge&quot;&gt;Safari&lt;/code&gt; 唤醒的功能了，这说明这段代码没办法执行，既然没有解决，只能靠 google 了。&lt;/p&gt;

&lt;p&gt;在查阅了一大波资料后，在 &lt;code class=&quot;highlighter-rouge&quot;&gt;App.entitlements&lt;/code&gt; 加上这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;com.apple.security.temporary-exception.apple-events&lt;/code&gt; 权限就可以了。&lt;/p&gt;

&lt;p&gt;到这里为止，一切正常的。&lt;br /&gt;
在虚拟定位加入这个权限的第一个版本，上架也非常顺利，但是这之后更新的一个版本，仅涉及一些UI细节的修复，收到苹果拒审的邮件，内容如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;我知道你要使用 com.apple.security.temporary-exception.apple-events 干嘛，
但是我不能给你用，要么你就去掉这个功能，要么你要自己找别的方式去实现。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;既然不给我用，为什么上个版本还能给我上架成功？？？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/2019110_IMG_2412.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个方法不行，只能另外再找方法了。&lt;/p&gt;

&lt;p&gt;从苹果的&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html#//apple_ref/doc/uid/TP40011195-CH4-SW25&quot;&gt;文档&lt;/a&gt;可以找到怎么通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;AppleScript&lt;/code&gt; 调用其他 App 功能的资料，苹果在文档中给我们举了个例子，如果要用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Mail.app&lt;/code&gt; 的邮件编写功能，可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;App.entitlements&lt;/code&gt; 加上一下的权限：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;com.apple.security.scripting-targets&amp;lt;/key&amp;gt;
    &amp;lt;dict&amp;gt;
        &amp;lt;key&amp;gt;com.apple.mail&amp;lt;/key&amp;gt;
        &amp;lt;array&amp;gt;
            &amp;lt;string&amp;gt;com.apple.mail.compose&amp;lt;/string&amp;gt;
        &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;com.apple.mail.compose&lt;/code&gt;这个访问组下的权限了，这个访问组下的权限，可以通过以下的命令看得到：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sdef /Applications/Mail.app &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/Desktop/mail.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;但是 Xcode 本身并没有提供一个可以修改定位的访问组权限给到我们，所以并不能使用以上的方法去解决。&lt;/p&gt;

&lt;p&gt;这时候不禁会想到，&lt;code class=&quot;highlighter-rouge&quot;&gt;System Event&lt;/code&gt; 能做什么呢，为什么苹果会不允许我们使用这个权限？对此我又对这个权限有了一个更深入的了解。&lt;/p&gt;

&lt;h1 id=&quot;思考&quot;&gt;思考&lt;/h1&gt;

&lt;p&gt;System Events其实是一个系统App，提供控制Mac OSX GUI和应用之间的交互，在这个路径下你可以找到&lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/CoreServices/System Events.app&lt;/code&gt;。 &lt;br /&gt;
通过System Events，我们可以做到以下这些东西：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;获取正在运行的App列表&lt;/li&gt;
  &lt;li&gt;（得到/点击）任意一个正在运行App中的UI元素&lt;/li&gt;
  &lt;li&gt;（打开/移动/删除）文件&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等等…这不就是等于能远程监控和控制别人的电脑吗？&lt;br /&gt;
所以苹果不开放这个权限也是有原因，既然这样，也只能找别的方法看看了。&lt;br /&gt;
苹果不允许开发者动态调用&lt;code class=&quot;highlighter-rouge&quot;&gt;AppleScript&lt;/code&gt;，但是可以调用 App 沙盒里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;Application Scripts&lt;/code&gt; 目录下的文件。
最终虚拟定位采用的方案也是这个，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Info.plist&lt;/code&gt;加上&lt;code class=&quot;highlighter-rouge&quot;&gt;NSAppleEventsUsageDescription&lt;/code&gt;,并且通过弹窗引导用户把控制Xcode的脚本保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;Application Scripts&lt;/code&gt;目录下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;FileManager.default.urls(for: .applicationScriptsDirectory, in: .userDomainMask)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终，总算顺利上架成功了。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;
&lt;p&gt;App的沙盒机制，给用户带来了安全保障，但是也给开发者带来了很多开发上的困难，同时也一定程度上会增加用户在使用上带来不好的体验。&lt;br /&gt;
如果你也想开发一款App并且上架AppStore，但是要依赖一个不是自己开发的App，大部分非Apple的App，都不会提供AppleScript的相关接口给到第三方使用，把applescript放在&lt;code class=&quot;highlighter-rouge&quot;&gt;Application Scripts&lt;/code&gt;目录下使用是目前唯一能上架成功的方式。&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/11/10/%E5%9C%A8Mac-app%E4%B8%8A%E6%89%A7%E8%A1%8CAppleScript/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/11/10/%E5%9C%A8Mac-app%E4%B8%8A%E6%89%A7%E8%A1%8CAppleScript/</guid>
        
        <category>Mac</category>
        
        <category>Xcode</category>
        
        
      </item>
    
      <item>
        <title>macOS High Sierra依赖OpenSSL交叉编译</title>
        <description>&lt;p&gt;有些比较老的库，又是依赖 openssl，要自己编译成静态库的时候，遇到了这个错误：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;configure: error: OpenSSL support explicitly requested but OpenSSL could not be found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果打算通过&lt;code class=&quot;highlighter-rouge&quot;&gt;brew link openssl&lt;/code&gt;软连接，会得到这个错误：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Warning: Refusing to link macOS-provided software: openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;后来查阅了一些资料，在 High Sierra 上，openssl 被 禁止通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;brew link openssl&lt;/code&gt; 软链接。&lt;/p&gt;

&lt;p&gt;设置这几个环境变量就可以了：&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/openssl/lib:&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/openssl/include:&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CPATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/openssl/lib/pkgconfig:&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 13 Oct 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/10/13/macOS-High-Sierra%E4%BE%9D%E8%B5%96OpenSSL%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/10/13/macOS-High-Sierra%E4%BE%9D%E8%B5%96OpenSSL%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</guid>
        
        <category>Mac</category>
        
        
      </item>
    
      <item>
        <title>iOS模拟移动定位</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;
&lt;p&gt;在阅读这篇文章之前，先保证你必须符合以下几个条件：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;有台Mac可以使用&lt;/li&gt;
  &lt;li&gt;有一定的编程经验（如果你愿意折腾，没有经验也是可以的）&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;正文&quot;&gt;正文&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.foolishtalk.org/2019/12/04/magellan/&quot;&gt;这里&lt;/a&gt;有个最新的方式，已经不需要用下面的方法了。&lt;/p&gt;

&lt;p&gt;因为有太多人说看不懂了，所以我又录了个&lt;a href=&quot;https://www.bilibili.com/video/av53629147&quot;&gt;视频&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先打开Mac应用虚拟定位，可以看到以下的界面，可以在这里&lt;a href=&quot;https://itunes.apple.com/cn/app/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/id1459663647?mt=12&quot;&gt;下载&lt;/a&gt;，另外有什么App使用上的问题和建议，也可以来&lt;a href=&quot;https://weibo.com/p/1005052095454814&quot;&gt;微博&lt;/a&gt;私信我：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/mock_location_12.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;双击选择你要定位的位置点；&lt;/li&gt;
  &lt;li&gt;在左上角填速度，每个点之间移动的速度会根据这个速度移动；&lt;/li&gt;
  &lt;li&gt;右上角保存会生成出一个gpx文件；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;先用Xcode新建一个工程，按照以下步骤操作，Xcode可以在App Store&lt;a href=&quot;https://itunes.apple.com/cn/app/xcode/id497799835?mt=12&quot;&gt;下载&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/mock_location_2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;选择创建iOS App：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_3.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;输入工程名，&lt;code class=&quot;highlighter-rouge&quot;&gt;Organization Name&lt;/code&gt;随便填就可以了，&lt;code class=&quot;highlighter-rouge&quot;&gt;Organization Identifier&lt;/code&gt;填”com.xxx.xxx”，xxx替换成任意英文即可：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_4.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;按照以下步骤，选择工程，然后添加账号，这里填你苹果账号：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_5.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;把手机连到Mac上，然后选中你的手机，如果没有看到你的手机，可以打开iTunes看看手机是否有连接，如果也没有，拔掉线重新连，应该会看到iTunes有个弹窗，点击信任此电脑，手机上也需要点击信任此电脑：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_8.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;输入你手机iOS系统的版本，这里代表可以运行的最低版本，例如你是iOS 10.2，输入10就可以了：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_11.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下载&lt;a href=&quot;https://itunes.apple.com/cn/app/%E8%99%9A%E6%8B%9F%E5%AE%9A%E4%BD%8D/id1459663647?mt=12&quot;&gt;虚拟定位&lt;/a&gt;，然后按照你想模拟的路径双击地图，按保存会生成一个GPX文件，把生成的GPX文件拖进去工程目录中：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_6.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;点击运行，首次运行可能会弹出需要信任证书的提示，这时候点击手机的设置-通用-描述文件与设备管理-「找到自己的开发证书」-点击信任，再重新运行一遍：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_9.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;选中你拖进去gpx文件名字的选项：&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/mock_location_10.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;这时候你会发现定位已经改变了，但是要注意，这时候手机和Mac是不能断开连接的，以及运行的App不能被杀死，否则定位修改都会失败。&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Thu, 11 Apr 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/04/11/mocklocation/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/04/11/mocklocation/</guid>
        
        <category>iOS</category>
        
        <category>Xcode</category>
        
        
      </item>
    
      <item>
        <title>音视频学习笔记</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;虽然2019年已经不是音视频的风口，但是不可否认在iOS开发中，依旧属于一个很火的领域，由于一直没有机会进入到一间由音视频技术驱动的公司，所以对音视频这块的学习没有很深入的学习，上年年底的时候，决心要做出点改变，所以有了这篇。&lt;br /&gt;
原来这篇只是作为一个自己的学习笔记，并没有打算作为文章发出来，后来大体将音视频最基础的点都记录后，想到作为一个入门小白级的文章，或许是个不错的选择。不过也因为最初的原因，参考了不少网上前辈的文章，但是没有记录下参考链接，如果有发现相似的内容，请在评论区下留下链接，定会在文末补上参考链接。&lt;/p&gt;

&lt;h1 id=&quot;直播&quot;&gt;直播&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/26038990/answer/130557483&quot;&gt;视频直播中说的抓流和推流，是什么意思，两种有什么区别？ - 刘博的回答 - 知乎&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;推流，指的是把采集阶段封包好的内容传输到服务器的过程。&lt;br /&gt;
拉流是指服务器已有直播内容，用指定地址进行拉取的过程。&lt;/p&gt;

&lt;p&gt;介绍一下目前有主流的推送协议，以及各自的优缺点。&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;RTMP&lt;br /&gt;
RTMP协议中，视频必须是H264编码，音频必须是AAC或MP3编码，且多以flv格式封包。RTMP是目前最主流的流媒体传输协议，对CDN支持良好，实现难度较低，是大多数的直播平台的选择。&lt;br /&gt;
不过RTMP有着一个最大的不足——不支持浏览器，且Adobe已不再更新。因此直播服务要支持浏览器的话，需要另外的推送协议支持。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;HLS&lt;br /&gt;
Http Live Streaming是由Apple公司定义的基于HTTP的流媒体实时传输协议。它的原理是将整个流分为多个小的文件来下载，每次只下载若干个。服务器端会将最新的直播数据生成新的小文件，客户端只要不停的按顺序播放从服务器获取到的文件，就实现了直播。基本上，HLS是以点播的技术实现了直播的体验。因为每个小文件的时长很短，客户端可以很快地切换码率，以适应不同带宽条件下的播放。&lt;br /&gt;
分段推送的技术特点，决定了HLS的延迟一般会高于普通的流媒体直播协议。&lt;br /&gt;
传输内容包括两部分：一是M3U8描述文件，二是TS媒体文件。TS媒体文件中的视频必须是H264编码，音频必须是AAC或MP3编码。&lt;br /&gt;
由于数据通过HTTP协议传输，所以完全不用考虑防火墙或者代理的问题，而且分段文件的时长很短。&lt;/li&gt;
  &lt;li&gt;WebRTC&lt;br /&gt;
WebRTC（Web Real-Time Communication），即“源自网页即时通信”。WebRTC是一个支持浏览器进行实时语音、视频对话的开源协议。WebRTC的支持者甚多，Google、Mozilla、Opera推动其成为W3C推荐标准。WebRTC支持目前的主流浏览器，并且基于SRTP和UDP，即便在网络信号一般的情况下也具备较好的稳定性。此外，WebRTC可以实现点对点通信，通信双方延时低，是实现“连麦”功能比较好的选择。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;rtmp和hls对比&quot;&gt;RTMP和HLS对比&lt;/h1&gt;

&lt;p&gt;· RTMP 首先就是延迟低，基于TCP的长链接，对于数据处理及时，收到即刻发送，推荐使用场景：即时互动。&lt;br /&gt;
· HLS 延迟高，短链接，原理是集合了一段时间的视频数据，切割ts片，逐个下载播放。优点是跨平台。&lt;/p&gt;

&lt;h1 id=&quot;编码和解码&quot;&gt;编码和解码&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;为什么要编码和解码？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先上数据：&lt;br /&gt;
一张1280 * 720 的RGBA图像大小等于：1280 * 720 * 4 = 3.516MB&lt;br /&gt;
一张1280 * 720 的YUV图像大小等于：1280 * 720 * 1 + 1280 *720 * 0.5 = 1.318MB&lt;br /&gt;
假设fps为24，一般电影长度90分钟大小等于： 1.318MB * 24fps * 90min * 60s = 166.8GB&lt;br /&gt;
这么大是不行的，所以需要视频编码。&lt;/p&gt;

&lt;p&gt;采集的原始音视频信号体积都非常大。里面有很多相同的、眼看不到的、耳听不到的内容。为了减小体积便于存储、传输、交流，就有了压缩无用信息和不重要的信息的“压缩处理”，这就叫“编码”。&lt;br /&gt;
压缩（编码）过的内容无法直接使用，使用（观看）时必须解压缩，还原为原始的信号（比如视频中某个点的颜色等），这就是“解码“或者”解压缩“&lt;/p&gt;

&lt;p&gt;软编解码：使用CPU进行编解码，大多使用FFmpeg来编码和解压音视频数据；&lt;br /&gt;
硬编解码：主要使用非CPU进行编解码，如GPU等。在使用中，大多直接调用系统API进行音视频编解码处理。使用VideoToolbox中的VTCompressionSessionRef实现&lt;/p&gt;

&lt;h1 id=&quot;cmsamplebufferref&quot;&gt;CMSampleBufferRef&lt;/h1&gt;

&lt;p&gt;系统的音视频输出类会回调&lt;code class=&quot;highlighter-rouge&quot;&gt;CMSampleBufferRef&lt;/code&gt;，我们可以通过这个获取视频帧或者音频帧。&lt;br /&gt;
代表视频的CMSampleBufferRef中保存的数据是yuv420格式的视频帧。（可以在设备输出初始化修改格式）&lt;br /&gt;
代表音频的CMSampleBufferRef中保存的数据是PCM格式的音频帧。&lt;br /&gt;
yuv是一种图片储存格式，跟RGB格式类似。yuv中，y表示亮度，单独只有y数据就可以形成一张图片，只不过这张图片是灰色的。u和v表示色差(u和v也被称为：Cb－蓝色差，Cr－红色差)&lt;/p&gt;

&lt;h1 id=&quot;flv&quot;&gt;FLV&lt;/h1&gt;

&lt;p&gt;flv是一种简单的视频合成格式。它支持指定的音视频格式，如：h263，h264，VP6 及 AAC，MP3，Nellymoser等。  &lt;br /&gt;
flv刚好支持 h264 和 aac。&lt;br /&gt;
rtmp协议所传输的视频流，就要求是flv格式。&lt;/p&gt;

&lt;h1 id=&quot;视频数据采集原理推流&quot;&gt;视频数据采集原理(推流)&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;音视频的采集，iOS 中，利用 AVCaptureSession和AVCaptureDevice 可以采集到原始的音视频数据流。一般采集原始格式为YUV，因为前面也有提到了，YUV体积比较小。
    &lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVCaptureSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// 1. 创建`AVCaptureSession`用来管理音视频输入、输出，`setSessionPreset:`可以设置视频分辨率；&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;_session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVCaptureSession&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_session&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSessionPreset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVCaptureSessionPreset640x480&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setupVideoCapture&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;//  2. 通过`AVCaptureDevice`拿到物理设备，再初始化`AVCaptureDeviceInput`输出对象；&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;AVCaptureDevice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVCaptureDevice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defaultDeviceWithMediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVMediaTypeVideo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;AVCaptureDeviceInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVCaptureDeviceInput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deviceInputWithDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 3. 将其设备输出对象`AVCaptureDeviceInput`添加到`AVCaptureSession`的输入中&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canAddInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deviceInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 4. 创建输出对象&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;AVCaptureVideoDataOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVCaptureVideoDataOutput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 5. 设置输出格式，iOS下目前仅支持这3种&lt;/span&gt;
 &lt;span class=&quot;cm&quot;&gt;/*
  kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange YUV格式，Y值取值范围[16,235]
  kCVPixelFormatType_420YpCbCr8BiPlanarFullRange  YUV格式，Y值取值范围[0,255]
  kCVPixelFormatType_32BGRA                       BGBA格式
  */&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgbOutputSettings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;@{(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCVPixelBufferPixelFormatTypeKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCVPixelFormatType_32BGRA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setVideoSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rgbOutputSettings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 6. 放弃因为阻塞而延迟的视频帧&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAlwaysDiscardsLateVideoFrames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 7. 创建一个串行队列，保证输出帧是按顺序返回的&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;videoDataOutputQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;VideoDataOutputQueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_SERIAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setSampleBufferDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutputQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    
 &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;canAddOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;videoDataOutput&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connectionWithMediaType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AVMediaTypeVideo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对视频进行 H264 编码，对音频进行 AAC 编码，在 ios 中分别有已经封装好的编码库来实现对音视频的编码。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对编码后的音、视频数据进行组装封包；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;建立 RTMP 连接并上推到服务端。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/20190305172841.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
   硬件采集 --&amp;gt; 音频数据流;
   硬件采集 --&amp;gt; 视频数据流;
   音频数据流 --&amp;gt; AAC编码;
   视频数据流 --&amp;gt; H264编码;
   AAC编码 --&amp;gt; 组装封包;
   H264编码 --&amp;gt; 组装封包; 
   组装封包 --&amp;gt; RTMP连接推上服务器;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;视频播放原理拉流&quot;&gt;视频播放原理(拉流)&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/20190305172857.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph LR
   数据 --&amp;gt; 解协议;
   解协议 --&amp;gt; 封装格式数据;
   封装格式数据 --&amp;gt; 解封装;
   解封装 --&amp;gt; 音频压缩数据;
   音频压缩数据 --&amp;gt; 音频解码;
   音频解码 --&amp;gt; 音频原始数据;
   音频原始数据 --&amp;gt; 音视频同步;
   解封装 --&amp;gt; 视频压缩数据;
   视频压缩数据 --&amp;gt; 视频解码;
   视频解码 --&amp;gt; 视频原始数据;
   视频原始数据 --&amp;gt; 音视频同步;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解封装的作用，就是将输入的封装格式的数据，分离成为音频流压缩编码数据和视频流压缩编码数据。封装格式种类很多，例如MP4，MKV，RMVB，TS，FLV，AVI等等，它的作用就是将已经压缩编码的视频数据和音频数据按照一定的格式放到一起。例如，FLV格式的数据，经过解封装操作后，输出H.264编码的视频码流和AAC编码的音频码流。&lt;/p&gt;

&lt;p&gt;解码的作用，就是将视频/音频压缩编码数据，解码成为非压缩的视频/音频原始数据。音频的压缩编码标准包含AAC，MP3，AC-3等等，视频的压缩编码标准则包含H.264，MPEG2，VC-1等等。解码是整个系统中最重要也是最复杂的一个环节。通过解码，压缩编码的视频数据输出成为非压缩的颜色数据，例如YUV420P，RGB等等；压缩编码的音频数据输出成为非压缩的音频抽样数据，例如PCM数据。
视音频同步的作用，就是根据解封装模块处理过程中获取到的参数信息，同步解码出来的视频和音频数据，并将视频音频数据送至系统的显卡和声卡播放出来。&lt;/p&gt;

&lt;p&gt;为什么要分封装格式和视频编码格式呢？ 这个其实跟网络分七层模型一个原理。解耦和，降低依赖，底层给上层提供基础功能，底层和上层都都可以单独扩展，可以以多种方案组合编码与封装，比如MP4与H264、MP4与MPEG、TS与H264等等。比如这里面的这边文章的编码就只负责将最原始的音频和视频数据就行压缩，而压缩完的数据要怎么组织就拜托给上层的封装，封装接到视频音频数据负责给数据编号，指定同步协议，加入字幕等操作。经过封装后，得到的就是可以播放的上面提到的视频文件MP4或者MKV等等。把这个过程反过来就是上图描述的视频播放的过程。&lt;/p&gt;

&lt;h1 id=&quot;优化&quot;&gt;优化&lt;/h1&gt;

&lt;h2 id=&quot;播放卡顿&quot;&gt;播放卡顿&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;造成卡顿的原因有几种情况&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;推流端网络抖动导致数据无法发送到服务器，造成播放端卡顿;&lt;/li&gt;
    &lt;li&gt;播放端网络抖动导致数据累积在服务器上拉不下来，造成播放卡顿。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;弹幕优化&quot;&gt;弹幕优化&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;弹幕阴影通过&lt;code class=&quot;highlighter-rouge&quot;&gt;NSAttributeString&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;NSStrokeColorAttributeName&lt;/code&gt;属性设置文字的轮廓颜色替换文字阴影。&lt;/li&gt;
  &lt;li&gt;用CALayer替代UIView展示。&lt;/li&gt;
  &lt;li&gt;将内容合成一张图片展现。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;优化切换前后台带来的累积延时&quot;&gt;优化切换前后台带来的累积延时&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;第一种方案是播放器采用视频同步音频的策略，然后退到后台时保持音频继续播放（在 iOS 平台需要开启 App 的 Background Audio 能力来配合）。这样可以保持音频一直播放不产生延时，而当回到前台时，视频同步音频直接切换到最新时间戳即可。笔者发现斗鱼也是使用了这个机制。&lt;/li&gt;
  &lt;li&gt;第二种方案是回到前台时重新刷新直播，重连直播流，这样即可消灭累积延时。但是这种方案的问题是重连直播流的过程需要一定的时间，这样回到前台时会有卡顿，或者出现黑屏，尤其是当你的首屏加载优化不够时，这个卡顿或黑屏时间会较长。所以这种方案在你的首屏加载优化的比较好的情况下可以采用。此外，你可以退到后台时截取视频当前帧贴图到直播间上，从而当切回前台时，防止黑屏，优化体验，实践效果还是不错的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;音视频同步&quot;&gt;音视频同步&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://techblog.toutiao.com/2018/05/29/untitled-20/&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 05 Mar 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/03/05/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/03/05/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>iOS</category>
        
        <category>音视频</category>
        
        
      </item>
    
      <item>
        <title>Swift闭包中weak多个对象</title>
        <description>&lt;p&gt;无论是在OC还是Swift都会有在闭包中需要弱引用对象的时候，没有在Swift的文档中看到如何在闭包中对多个对象弱引用，最后在stackoverflow上&lt;a href=&quot;https://stackoverflow.com/questions/28015394/how-can-you-capture-multiple-arguments-weakly-in-a-swift-closure&quot;&gt;找到&lt;/a&gt;相关的资料：&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;weak&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            
    &lt;span class=&quot;c1&quot;&gt;//....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 23 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/02/23/Swift%E9%97%AD%E5%8C%85%E4%B8%ADweak%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/02/23/Swift%E9%97%AD%E5%8C%85%E4%B8%ADweak%E5%A4%9A%E4%B8%AA%E5%AF%B9%E8%B1%A1/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        <category>Swift-Tips</category>
        
        
      </item>
    
      <item>
        <title>iOS多线程总结</title>
        <description>&lt;h1 id=&quot;ios多线程总结&quot;&gt;iOS多线程总结&lt;/h1&gt;

&lt;h2 id=&quot;碎碎念&quot;&gt;碎碎念&lt;/h2&gt;
&lt;p&gt;这是2019的第一篇，虽然原来这篇大概在上年7、8月的时候就开始写了，但是因为各种生活+工作的事情，再加上对文章保持严谨的态度，在写之前写过很多测试代码，同时也顺便自己复习了一下，所以一直搁置到现在才写完。&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;最初写这一篇，是曾经被抛出过一个很泛的问题，“说说你知道的iOS多线程的知识点？”，对于一个iOS开发者来说，多线程绝对不陌生，而且经常会用到，但是遇到这个问题的时候，很容易想到什么就说什么，给别人一种“不熟悉”的感觉，所以借着这个原因，我也去梳理了一下关于多线程的知识，写下这篇文章，作为记录。&lt;/p&gt;

&lt;p&gt;如果没有耐心看完，可以直接看&lt;a href=&quot;http://images.foolishtalk.org/2019-2-16-iOS-thread.png&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;正文&quot;&gt;正文&lt;/h2&gt;
&lt;p&gt;聊到多线程，肯定少不了要说说进程和线程之间的关系。&lt;/p&gt;

&lt;h3 id=&quot;什么是进程&quot;&gt;什么是进程？&lt;/h3&gt;
&lt;p&gt;在操作系统中，开启一个任务会开启一个进程。&lt;br /&gt;
在iOS上，一个app对应一个进程。每个进程运行在其专用且受保护的内存空间中。&lt;br /&gt;
例如在mac上打开终端，然后再输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt;就会看到开启了一条&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MacdeMacBook-Pro:~ Fidetro$ ps
  PID TTY           TIME CMD
 8329 ttys000    0:00.03 -bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果再开打开一个终端，再次输入&lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt;就会看到开启了两个&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MacdeMacBook-Pro:~ Karim$ ps
  PID TTY           TIME CMD
 8329 ttys000    0:00.03 -bash
 8651 ttys001    0:00.02 -bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;一个进程中又至少会开启一条线程，在iOS中，我们把那条线程叫做主线程。一个进程可以开启多条线程。&lt;/p&gt;
&lt;h3 id=&quot;什么是线程&quot;&gt;什么是线程？&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;线程是指给代码单独执行的通道。  —-翻译自&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1&quot;&gt;苹果文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;iOS中提供了4个方案让我们使用多线程，分别是：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pthreads&lt;/li&gt;
  &lt;li&gt;NSThread&lt;/li&gt;
  &lt;li&gt;GCD&lt;/li&gt;
  &lt;li&gt;NSOperation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这篇主要是讲GCD，其他方案的资料，可以参考总结的图。&lt;/p&gt;

&lt;h3 id=&quot;gcd&quot;&gt;GCD&lt;/h3&gt;
&lt;p&gt;GCD是一套C语言编写的接口，其代码也是&lt;a href=&quot;https://apple.github.io/swift-corelibs-libdispatch/&quot;&gt;开源&lt;/a&gt;,它为我们提供多线程技术，GCD中最核心的两个概念，任务和队列。&lt;/p&gt;

&lt;p&gt;在iOS中使用GCD创建队列，调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);&lt;/code&gt;&lt;br /&gt;
第一个参数代表队列的名字，第二参数代表队列的类型，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_QUEUE_SERIAL&lt;/code&gt;创建串行队列，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;DISPATCH_QUEUE_CONCURRENT&lt;/code&gt;创建并行队列。&lt;/p&gt;

&lt;h4 id=&quot;串行队列&quot;&gt;串行队列&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/2019-2-14-sync.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
串行队列，任务按照进入顺序执行。遵循FIFO（先进先出）原则。&lt;/p&gt;

&lt;h4 id=&quot;并行队列&quot;&gt;并行队列&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://images.foolishtalk.org/2019-2-14-async.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
并行队列，任务会并行执行，无法保证任务完成的时机是添加的顺序。&lt;/p&gt;

&lt;h4 id=&quot;异步&quot;&gt;异步&lt;/h4&gt;
&lt;p&gt;异步执行不会等待内部代码全部执行完然后返回，而是直接往下执行。&lt;/p&gt;

&lt;h4 id=&quot;同步&quot;&gt;同步&lt;/h4&gt;
&lt;p&gt;同步执行会等待内部代码执行完毕之后，再往下执行。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;同步&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;异步&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;串行队列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;不会创建新的线程，而是在当前线程执行。任务按顺序执行，等待内部代码执行完毕后往下执行。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_queue_create()&lt;/code&gt;会创建新的线程，任务按顺序执行，不会等待内部代码全部执行完然后返回，而是直接往下执行。&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;并行队列&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;与串行同步一致。&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;调用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_async()&lt;/code&gt;会创建新的线程，任务在不同的线程下执行。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;dispatch_after&quot;&gt;dispatch_after&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_after()&lt;/code&gt;是iOS最常用的延时方法。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//两秒后执行&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;dispatch_group_t&quot;&gt;dispatch_group_t&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_t&lt;/code&gt;用来监听多个异步任务的完成。&lt;br /&gt;
GCD提供了两种方式去获取&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_t&lt;/code&gt;完成的回调。&lt;br /&gt;
第一种是&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_notify()&lt;/code&gt;，不会阻塞当前线程，在所有任务完成后，回调到block；&lt;br /&gt;
第二种是&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_wait()&lt;/code&gt;，会阻塞当前线程，等待所有任务完成后才往下走，&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_wait()&lt;/code&gt;不可以在主线程调用，否则会造成死锁。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_notify()&lt;/code&gt;的例子如下：&lt;/p&gt;
&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;n&quot;&gt;dispatch_group_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_group_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dispatch_group_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dispatch_group_leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dispatch_group_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dispatch_group_leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;dispatch_group_notify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clang&quot;&gt;2018-12-19 15:12:27.770146+0800 GCD[70391:2895561] 2
2018-12-19 15:12:29.220584+0800 GCD[70391:2895561] 1
2018-12-19 15:12:29.220987+0800 GCD[70391:2895561] 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_group_wait()&lt;/code&gt;例子如下：&lt;/p&gt;
&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;asyncQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.group.queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_CONCURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asyncQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_group_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_group_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_global_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dispatch_group_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dispatch_group_leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dispatch_group_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dispatch_group_enter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;dispatch_after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dispatch_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_NOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSEC_PER_SEC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_get_main_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;dispatch_group_leave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dispatch_group_wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DISPATCH_TIME_FOREVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clang&quot;&gt;2019-02-16 12:21:12.300569+0800 GCD[79234:3427553] 2
2019-02-16 12:21:13.751251+0800 GCD[79234:3427553] 1
2019-02-16 12:21:13.751419+0800 GCD[79234:3427633] 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;dispatch_barrier_async&quot;&gt;dispatch_barrier_async&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier&lt;/code&gt;相当于一个“栅栏”的作用，在相同的队列中，会先执行在&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier&lt;/code&gt;之前的任务，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier&lt;/code&gt;之后的任务，都需要等待&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier&lt;/code&gt;完成之后，才会执行block里面的内容。&lt;/p&gt;

&lt;p&gt;另外苹果文档中有写道：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The queue you specify should be a concurrent queue that you create yourself using the dispatch_queue_create function. If the queue you pass to this function is a serial queue or one of the global concurrent queues, this function behaves like the dispatch_sync function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_barrier_async&lt;/code&gt;的时候，需要自定义队列才有效，如果使用全局队列或者同步队列，效果和&lt;code class=&quot;highlighter-rouge&quot;&gt;dispatch_sync()&lt;/code&gt;同步函数一样。&lt;/p&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c1&quot;&gt;//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_queue_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataQueue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dispatch_queue_create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.karim.gcd.dataqueue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DISPATCH_QUEUE_CONCURRENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSThread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleepForTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;read data 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;read data 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//等待前面的都完成，在执行barrier后面的&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_barrier_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;write data 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSThread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleepForTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSThread&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sleepForTimeInterval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;read data 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dispatch_async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;read data 4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-clang&quot;&gt;2018-12-19 15:26:50.297477+0800 GCD[70716:2943544] read data 2
2018-12-19 15:26:52.302570+0800 GCD[70716:2943541] read data 1
2018-12-19 15:26:52.302925+0800 GCD[70716:2943541] write data 1
2018-12-19 15:26:53.306632+0800 GCD[70716:2943544] read data 4
2018-12-19 15:26:54.307808+0800 GCD[70716:2943541] read data 3
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;我把一些关于多线程的知识点整理在这个图里了，如果有遗漏，可以联系我，我会即时补充上去。&lt;br /&gt;
&lt;img src=&quot;http://images.foolishtalk.org/2019-2-16-iOS-thread.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ming1016/study/wiki/iOS%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B&quot;&gt;iOS并发编程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://liuyanwei.jumppo.com/2015/08/19/ios-ThreadAndAsynchronization.html&quot;&gt;ios的线程和同步异步操作&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 16 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/02/16/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/02/16/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%80%BB%E7%BB%93/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>2019的关键词</title>
        <description>&lt;h1 id=&quot;2018&quot;&gt;2018&lt;/h1&gt;

&lt;p&gt;在过去的一年，经历了人生第一次裁员，被万表裁了之后，期间去过YY面试，第一次去到大公司去面试，面试之前并没有怎么好好准备，一直以来对自己的水平都是非常自信，结果依旧在上面栽了个大跟斗，最终在东莞和广州之间，还是选择留在了广州，去到了悦跑圈，年轻还是尽量希望能够往更好的平台和城市发展。&lt;br /&gt;
在工作和技术上，并没有很大突破，这点其实很遗憾，日复一日的搬砖，自身专业上没有很好沉淀，对细节把控不够，深度依旧不够深入，真的很不满意现状的水平。&lt;br /&gt;
给自己定下2019的几个关键词，不忘初心，方得始终。&lt;/p&gt;

&lt;h1 id=&quot;细节&quot;&gt;细节&lt;/h1&gt;
&lt;p&gt;deadline短，并不是给自己代码不规范的借口，注重细节，真的很大程度上可以减少更多bug。&lt;br /&gt;
看待问题要有更全面的思考，稍不注意就有可能影响到原有的逻辑。&lt;/p&gt;

&lt;h1 id=&quot;清醒&quot;&gt;清醒&lt;/h1&gt;
&lt;p&gt;不被他人左右自己的方向，知道自己要做的是什么，什么该做，什么不该做，当机立断。&lt;/p&gt;

&lt;h1 id=&quot;感恩&quot;&gt;感恩&lt;/h1&gt;
&lt;p&gt;感谢那些纵容你犯错后以后原谅你的人，不要再犯错，失去别人对你的信任了。&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Feb 2019 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2019/02/04/2019%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2019/02/04/2019%E7%9A%84%E5%85%B3%E9%94%AE%E8%AF%8D/</guid>
        
        <category>杂谈</category>
        
        
      </item>
    
      <item>
        <title>CloudKit实践</title>
        <description>&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;在iOS 11后，有个&lt;a href=&quot;https://support.apple.com/zh-cn/HT204681&quot;&gt;接力&lt;/a&gt;的功能非常好用，可以在iPhone和Mac上共享剪贴板等。但是自己用的时候，总有很多小问题，明明需要打开的都打开了接力失效、上一次复制的是图片后来复制的是文本，iPhone直接剪贴板都不出来了。经历了一顿需求分析之后，决定自己动手做一个。&lt;br /&gt;
既然要实现跨平台，免不了要涉及到服务器，选择自己去写还是使用现有的云服务，成为了当前选择的最大问题。
为了解决又快&lt;del&gt;懒~~又安全&lt;/del&gt;懒~~的问题，我最终选择了苹果自带的&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudKit&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;cloudkit&quot;&gt;CloudKit&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudKit&lt;/code&gt;是苹果在WWDC2014推出通过iCloud服务存储结构化应用程序和用户数据的框架，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudKit&lt;/code&gt;获取app现有数据并将其存储在云中，实现用户多设备访问。&lt;/p&gt;

&lt;h2 id=&quot;容器containers&quot;&gt;容器（Containers）&lt;/h2&gt;

&lt;p&gt;一个App可以创建和拥有多个容器：&lt;br /&gt;
&lt;img src=&quot;https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitQuickStart/Art/3_specifycontainers2_2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//创建容器&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;在Capabilities选择的容器identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一个容器中拥有&lt;code class=&quot;highlighter-rouge&quot;&gt;Public&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Private&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Shared&lt;/code&gt;三种数据库，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CKContainer&lt;/code&gt;的实例获取：&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKContainer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;privateCloudDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publicCloudDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;@available(OSX 10.12, *)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sharedCloudDatabase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKDatabase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;不同类型的数据库，可以通过下面的表格对比：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;类型&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;占用用户iCloud容量&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;需要登录iCloud&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;访问&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;privateCloudDatabase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;登录iCloud后允许访问，数据跟随iCloud账号&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;publicCloudDatabase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;否，使用的是app的公共iCloud容量，具体参考&lt;a href=&quot;https://developer.apple.com/icloud/cloudkit/&quot;&gt;这里&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;否&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;允许不登录iCloud账号，但只能读取，不能写入，同bundle id下所有用户都能访问&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;sharedCloudDatabase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;否&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;是&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;所有app都可以访问&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;使用&quot;&gt;使用&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;在写代码之前，需要先去&lt;a href=&quot;https://icloud.developer.apple.com/dashboard/&quot;&gt;CloudKit dashboard&lt;/a&gt;，创建&lt;code class=&quot;highlighter-rouge&quot;&gt;Record Type&lt;/code&gt;，同时在新建的Record Type页面新增字段，增加完字段之后，记得要为字段添加&lt;code class=&quot;highlighter-rouge&quot;&gt;recordName&lt;/code&gt;索引，不然查询的时候会报错。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitQuickStart/Art/2017RecordTypes_2x.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建指定唯一记录名称的记录ID。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;artworkRecordID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKRecordID&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recordName&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：“&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;创建一个记录对象。
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;artworkRecord&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKRecord&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recordType&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：“&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Artwork&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recordID&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artworkRecordID&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;设置记录的字段
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;artworkRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MacKerricher State Park&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;artworkRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;artist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mei Chen&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;artworkRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;address&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fort Bragg, CA&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;初始化容器并获取数据库对象
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKContainer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;iCloud.com.example.ajohnson.GalleryShared&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//如果使用默认容器，CKContainer.default()  &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;publicDatabase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicCloudDatabase&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;保存对象
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;publicDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;artworkRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;// 处理错误&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// ...保存成功之后的处理&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;查询
    &lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSPredicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;CKQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;recordType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Artwork&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;myContainer&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicCloudDatabase&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inZoneWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
         &lt;span class=&quot;kt&quot;&gt;OperationQueue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addOperation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                   &lt;span class=&quot;c1&quot;&gt;// 处理错误&lt;/span&gt;
                 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                 &lt;span class=&quot;c1&quot;&gt;// ...保存成功之后的处理&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;应用&quot;&gt;应用&lt;/h1&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;CloudKit&lt;/code&gt;，我分别在iOS上使用Today Widget，在Mac上监听键盘组合键来实现了接力中的共享粘贴板功能，目前功能还比较简单，不过基本也满足了我自己的需求了，后续有时间还是会完善一下复制图片、预览这些小功能的，&lt;a href=&quot;https://github.com/Fidetro/KTCloud&quot;&gt;代码&lt;/a&gt;在这里，感兴趣可以看一下。&lt;/p&gt;

&lt;h1 id=&quot;参考链接&quot;&gt;参考链接&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/archive/documentation/DataManagement/Conceptual/CloudKitQuickStart/Introduction/Introduction.html#//apple_ref/doc/uid/TP40014987-CH1-SW1&quot;&gt;CloudKit官方文档&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.apple.com/documentation/cloudkit/ckcontainer&quot;&gt;CKcontainer官方文档&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Dec 2018 00:00:00 +0800</pubDate>
        <link>http://www.foolishtalk.org/2018/12/15/CloudKit%E5%AE%9E%E8%B7%B5/</link>
        <guid isPermaLink="true">http://www.foolishtalk.org/2018/12/15/CloudKit%E5%AE%9E%E8%B7%B5/</guid>
        
        <category>iOS</category>
        
        <category>Swift</category>
        
        
      </item>
    
  </channel>
</rss>
