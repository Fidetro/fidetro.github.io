<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FoolishTalk</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 06 Mar 2018 16:06:49 +0800</pubDate>
    <lastBuildDate>Tue, 06 Mar 2018 16:06:49 +0800</lastBuildDate>
    <generator>Jekyll v3.7.0</generator>
    
      <item>
        <title>Swift高阶函数的使用</title>
        <description>&lt;h2 id=&quot;本文内容基于swift-4&quot;&gt;本文内容基于Swift 4&lt;/h2&gt;
&lt;p&gt;在读《Swift进阶》的时候发现,Swift提供了很多内置的高阶函数用于数组变形，使用高阶函数最大优势在于，用更少量的代码去解决问题。&lt;/p&gt;
&lt;h1 id=&quot;map&quot;&gt;map&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let a = [1,2,3,4,5,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要把这个数组中的元素每个都+1，按照以前的做法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;var b = [Int]()
    for ele in a {
        b.append(ele+1)
    }
    print(b)//[2,3,4,5,6,7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但使用map之后&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let b = a.map { (ele) -&amp;gt; Int in
        return ele+1
    }
    print(b)//[2,3,4,5,6,7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同时也因为&lt;code class=&quot;highlighter-rouge&quot;&gt;Swift&lt;/code&gt;闭包的特性，上面的代码还可以写成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let b = a.map{
        $0+1
    }
    print(b)//[2,3,4,5,6,7]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;flatmap&quot;&gt;flatMap&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;的用法很相像，通过对比两者的不难发现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;public func map&amp;lt;T&amp;gt;(_ transform: (Element) throws -&amp;gt; T) rethrows -&amp;gt; [T]

public func flatMap(_ transform: (Element) throws -&amp;gt; String?) rethrows -&amp;gt; [String]
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;允许返回&lt;code class=&quot;highlighter-rouge&quot;&gt;nil&lt;/code&gt;值，对元素进行过滤再变形&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;可以将多维数组转成一维数组
    &lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let a = [[1,2,3],[4,5,6]]
 let b = a.flatMap {
     $0
 }
 print(b)//[1,2,3,4,5,6]
&lt;/code&gt;&lt;/pre&gt;
    &lt;h1 id=&quot;filter&quot;&gt;filter&lt;/h1&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;用于过滤元素&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt; let a = [1,2,3,4,5,6]
 //去掉a数组内&amp;lt;4的元素
 let b = a.filter { (value) -&amp;gt; Bool in
     return value &amp;gt; 4
 }
 print(b)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;reduce&quot;&gt;reduce&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;可以将数组中的元素合并到一个值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;let a = [1,2,3,4,5,6]
//如果要将a数组内所有元素相加，再+7，以前的写法是这样：
let count = 0
for value in a {
   count += value
}
count += 7
print(count)//28
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在使用reduce之后，事件就变得非常简单&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let b = a.reduce(7) { (count, value) -&amp;gt; Int in
        return count+value
    }
    print(b)//28
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;sequence&quot;&gt;sequence&lt;/h1&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;可以生成无限的序列
假设我们要从遍历从0到100的偶数，以前的写法是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    for i in 0..&amp;lt;26 {
        print(i*2) //0,2,4...48,50
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而&lt;code class=&quot;highlighter-rouge&quot;&gt;sequence&lt;/code&gt;只需要:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    for i in sequence(first: 0, next: {$0+2}) {
        if i&amp;gt;50 {
            break
        }
        print(i) //0,2,4...48,50
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;sorted&quot;&gt;sorted&lt;/h1&gt;
&lt;p&gt;用于排序&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;//倒序
    let a = [1,2,3,4,5,6]
    let b =  a.sorted { (next, last) -&amp;gt; Bool in
        return next &amp;gt; last
    }
    print(b)//[6, 5, 4, 3, 2, 1]

    //根据字母顺序倒序
    let students: Set = [&quot;Kofi&quot;, &quot;Abena&quot;, &quot;Peter&quot;, &quot;Kweku&quot;, &quot;Akosua&quot;]
    let descendingStudents = students.sorted(by: &amp;gt;)
    print(descendingStudents)
    // Prints &quot;[&quot;Peter&quot;, &quot;Kweku&quot;, &quot;Kofi&quot;, &quot;Akosua&quot;, &quot;Abena&quot;]&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;split&quot;&gt;split&lt;/h1&gt;
&lt;p&gt;分割数组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let a = [1,2,3,4,5,6]
    //按照0分割数组，数组中没有0
    let b =  a.split(separator: 0)
    print(b[0])//[1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let a = [1,2,3,4,3,6]
    //按照3分割数组
    let b =  a.split(separator: 3)
    print(b)//[ArraySlice([1, 2]), ArraySlice([4]), ArraySlice([6])]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;prefix&quot;&gt;prefix&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;类似，过滤条件为true的时候会到结果中，区别在于，当为false的时候会直接结束&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let a = [1,2,3,4,3,6]
    let b =  a.prefix(upTo: 4)
    print(b)//[1,2,3,4]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;drop&quot;&gt;drop&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drop&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;prefix&lt;/code&gt;相反，当为true的时候元素会被丢弃，为false的时候会直接结束&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Swift&quot;&gt;    let a = [1,2,3,4,3,6]
    let b =  a.drop(while: { (value) -&amp;gt; Bool in
        if value &amp;lt; 3 {
            return true
        }
        return false
    })
     print(b)//[3, 4, 3, 6]
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/06/Swift%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/06/Swift%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
        
        <category>Swift-Tips</category>
        
        <category>Swift</category>
        
        
      </item>
    
      <item>
        <title>Swift-Tips String截取字符串</title>
        <description>&lt;p&gt;
在&lt;code class=&quot;highlighter-rouge&quot;&gt;Objective-C&lt;/code&gt;中我们可以使调&lt;code class=&quot;highlighter-rouge&quot;&gt;substringWithRange&lt;/code&gt;的方法达到截取字符串的效果&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[@&quot;123&quot; substringWithRange:NSMakeRange(1, 2)];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在Swift 4之前，也是有类似的方法&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;ss&quot;.substring(with: &amp;lt;Range&amp;lt;String.Index&amp;gt;&amp;gt;)&lt;/code&gt;  ,但是在Swift 4之后被弃用了，我们可以通过用&lt;code class=&quot;highlighter-rouge&quot;&gt;extension&lt;/code&gt;的方法去给他增加截取字符串的方法&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension String{
    func to(_ index:Int) -&amp;gt; String? {
        let toIndex = String.Index.init(encodedOffset: index)
        guard toIndex &amp;lt; self.endIndex else { return nil }
        return String(self[...toIndex])
        
    }
    func from(_ index:Int) -&amp;gt; String? {
        let fromIndex = String.Index.init(encodedOffset: index)
        guard fromIndex &amp;lt; self.endIndex else { return nil }
        return String(self[fromIndex..&amp;lt;self.endIndex])
    }
    func subString(_ from:Int,to:Int) -&amp;gt; String? {
        let toIndex = String.Index.init(encodedOffset: from)
        let fromIndex = String.Index.init(encodedOffset: to)
        guard toIndex &amp;lt; self.endIndex,
            fromIndex &amp;lt; self.endIndex,
            toIndex &amp;lt;= fromIndex else { return nil }
        return String(self[toIndex...fromIndex])
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在又可以方便的截取字符串了&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(&quot;12345678&quot;.to(3)) //Optional(&quot;1234&quot;)  

print(&quot;12345678&quot;.from(3)) //Optional(&quot;45678&quot;)  

print(&quot;12345678&quot;.subString(3, to: 5))  //Optional(&quot;456&quot;)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外我们还可以结合Swift下标的特性，达到通过取字符串下标截取字符串&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;extension String{
    subscript(index:Int) -&amp;gt; String? {
        return subString(index, to: index)
    }
    subscript (bounds: CountableClosedRange&amp;lt;Int&amp;gt;) -&amp;gt; String? {
        return subString( bounds.lowerBound, to: bounds.upperBound)
    }
    subscript (bounds: CountableRange&amp;lt;Int&amp;gt;) -&amp;gt; String? {
        return subString( bounds.lowerBound, to: bounds.upperBound)
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;print(&quot;12345678&quot;[2])  //Optional(&quot;3&quot;)  

print(&quot;12345678&quot;[3...5])  //Optional(&quot;456&quot;)

print(&quot;12345678&quot;[100])  //nil
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 29 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/29/Swift-Tips-String%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/29/Swift-Tips-String%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
        
        <category>Swift-Tips</category>
        
        <category>Swift</category>
        
        
      </item>
    
      <item>
        <title>浅谈iOS在物联网应用中的架构</title>
        <description>&lt;p&gt;这篇文章在很早之前就在酝酿，我目前的开发生涯中，在现在这间公司之前，都是和硬件打交道的，期间踩了很多坑，尝试了很多不同方式的写法和架构的改变，因此有了些经验，可能文中的一些点大家都比较熟悉，只是在处理上略有不同，接下来我会分享一下自己的做法，作为对自己在iOS物联网方面一个短暂的总结吧。如果有什么不同的意见，也可以在评论区留下评论，可以一起探讨一下问题。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;物联网在ios上的表现无非两种&quot;&gt;物联网在iOS上的表现，无非两种&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;WiFi&lt;/li&gt;
  &lt;li&gt;蓝牙&lt;br /&gt;
而这两种表现形式，在做的事情无非就是：&lt;br /&gt;
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/2345604-7134da016a716ebf.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/0C1F4A7B-90A5-4CB1-B51A-A06A48116480.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;硬件和App之间如何通讯实现交互不属于本文讨论的范畴，因为其表现形式都会像上图一样。从代码层上来讲，通讯这部分都应该封装成一个类，外部无需知道内容是如何实现，业务方只需要得到设备返回的数据以及将数据发送给设备就可以了，类似于下面这样:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeviceDataManagerDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//  这里的device他可以是蓝牙的外设，也可以是能某种能标示设备的tag，能get到点就可以了
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeviceDataManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sendData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;为了下面的内容更好理解，避免和http请求的网络层混淆，我把这一层叫作&lt;code class=&quot;highlighter-rouge&quot;&gt;传输层&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;网络层&lt;/code&gt;中，我们一般会根据业务对网络请求进行封装，避免重复写处理非正常结果时的代码，传输层中并不能像网络层一样能直接使用得到的数据，传输层中得到一般都是经过自定的协议包装加密过后的数据，而不像网络层使用JSON那么方便，抛开自定义的协议来讲，物联网中传输层最基本的内容都会由以下的组成：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;传输层数据
│
├────命令字(功能)
├────消息体(行为)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在得到这部分数据之后，我们会经过根据事先与硬件方约定好的协议去进行解析，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;0x0100&lt;/code&gt;这个数据代表了什么：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;           开关（功能）  状态（行为）
传输层数据    0x01         0x00 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这部分数据看起来十分简单，但是对于一个完全没有看过事先与硬件方约定好的协议来说，是非常难懂的。&lt;br /&gt;
在我当时团队的code review的时候，也发现了因此带来的一些问题：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.随着版本更新，新的协议增加导致数据变得越来越庞大，接手的同学一脸懵逼;
2.处理数据后，通知满天飞，甚至没有处理消息体直接丢;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;del&gt;对于第一个问题，我曾经有考虑过使用一门语言作出通用的解析库，硬件端、移动端、前端、后台如果需要解析这个数据，只需要传入传输层数据，返回的就是JSON对象这样的一个方案。想象中挺美好的，但是这样也会带来解析库的维护成本以及额外的文档，后来还是放弃了这个做法。&lt;/del&gt;&lt;br /&gt;
 在第一的问题上，最终还是老老实实的手动解析成model。&lt;br /&gt;
 造成第二个问题，很大程度也是因为团队里没有约定很好的代码规范导致的。在当时，我还没有很深入的了解过AOP，选择的是在一开始处理完数据之后，会用另外一个model的block去接收，然后另外在controller去订阅，这种做法有个弊端就是代码量十分多，后来我了解到了&lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;之后，我强烈推荐使用&lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;去解决这个问题，这里用AOP好处是：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;不需要再管理通知的监听和移除,也因此避免了通知带来的没有释放控制器的问题;&lt;/li&gt;
  &lt;li&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;，代码会变得更加整洁和少;&lt;br /&gt;
空说无益，还是直接上图吧&lt;br /&gt;
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/D45F4AE5-5D7F-4C98-9AB9-B26886FFC8FF.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AOP&lt;/code&gt;的框架，我看了网上也有很多，大部分是在&lt;a href=&quot;https://github.com/steipete/Aspects&quot;&gt;Aspects&lt;/a&gt;的基础上封装的，更推荐直接去使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Aspects&lt;/code&gt;,像是一些发送队列，几秒内只接收一个，几秒内只处理最后一个这种需求，都比较方便，当然也用&lt;code class=&quot;highlighter-rouge&quot;&gt;RAC&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;RxSwift&lt;/code&gt;处理，见仁见智。&lt;/p&gt;

&lt;p&gt;怕讲的太抽象，放一段使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Aspects&lt;/code&gt;的伪代码：&lt;/p&gt;

&lt;p&gt;Action的伪实现&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TAction&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//处理数据
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;hello action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Store的伪代码实现&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TStore&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;handler_block&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object_getClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAction&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aspect_hookSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;@selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AspectPositionAfter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usingBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AspectInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aspectInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;aspectInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalInvocation&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getReturnValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;handler_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在Controller上，我们就只需要订阅Store的消息就可以了：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ViewController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;    
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TStore&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;    
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;物联网除了还会有很多关于网络层的小坑以外，别的就和其他领域的也差不多了，所以也不想说太多老生常谈的东西，就这样。&lt;/p&gt;
</description>
        <pubDate>Tue, 16 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/16/%E6%B5%85%E8%B0%88iOS%E5%9C%A8%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E6%9E%B6%E6%9E%84/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/16/%E6%B5%85%E8%B0%88iOS%E5%9C%A8%E7%89%A9%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E6%9E%B6%E6%9E%84/</guid>
        
        <category>架构</category>
        
        <category>物联网</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>在UITableView中使用RunLoop遇到的坑</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在做Pet Day的时候，遇到一个这样的需求，假定&lt;code class=&quot;highlighter-rouge&quot;&gt;tableView&lt;/code&gt;中的section初始值为50,在往上或者往下的时候，需要通过计算得知更多的&lt;code class=&quot;highlighter-rouge&quot;&gt;dataSource&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后我一开始的做法，是在&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath;&lt;/code&gt;的方法在接近顶部或者接近底部的时候，进行计算&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    func tableView(_ tableView: UITableView,
                   willDisplay cell: UITableViewCell,
                   forRowAt indexPath: IndexPath) {
        //如果大于数据源总数-30，需要开始计算后面的内容
        if indexPath.section &amp;gt; dataSource.count - 30 {
           
        }else if indexPath.section &amp;lt; 30 {//如果小于30，需要开始计算前面的内容
           
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;但是，这样做会有问题&lt;/strong&gt;，在遇到向上刷新的时候，会多次调用&lt;code class=&quot;highlighter-rouge&quot;&gt;- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath;&lt;/code&gt;的方法，导致数据突然增多。&lt;/p&gt;

&lt;p&gt;后来用定时器实现触发后0.5秒内拦截，代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   guard share.operations.contains(tag) == false else {
            return
        }
        let timer = Timer.bs_scheduledTimer(withTimeInterval: interval, block: { (timer) in
            weak var weakTimer = timer

            weakTimer?.invalidate()
            weakTimer = nil
        }, repeats: false)
        share.operations.insert(tag)
        timer.fire()
        shareRunLoop().add(timer, forMode: .defaultRunLoopMode)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;这时候runloop的坑就来了&quot;&gt;&lt;strong&gt;这时候RunLoop的坑就来了&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;第一次触发…正常&lt;br /&gt;
第二次触发…0.5秒过了，好几秒过去了，还是没有反应&lt;br /&gt;
…&lt;br /&gt;
终于在停止刷新后，再往上刷，正常了&lt;/p&gt;

&lt;p&gt;我自己的推测是因为tableView在刷新的过程中，tableView的刷新事件比定时器的事件先进，需要等刷新停止了，定时器才能执行&lt;br /&gt;
然后换了另外一种实现方式就没问题了&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        
        guard share.operations.contains(tag) == false else {
            return
        }
            operation()
        
        DispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + interval, execute: {
            share.operations.remove(tag)
        })
        
        share.operations.insert(tag)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 12 Jan 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/01/12/%E5%9C%A8UITableView%E4%B8%AD%E4%BD%BF%E7%94%A8RunLoop%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/01/12/%E5%9C%A8UITableView%E4%B8%AD%E4%BD%BF%E7%94%A8RunLoop%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</guid>
        
        <category>问题随笔</category>
        
        <category>RunLoop</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>swift使用protocol的时候出现循环引用</title>
        <description>&lt;p&gt;在给Alamofire用protocol封装一层业务的时候，定义了以下的协议和方法&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol BaseRequest {
}
extension FIDRequest {
    func complete(_ completionHandler: @escaping ((DataResponse&amp;lt;Any&amp;gt;) -&amp;gt; ())) {
        let url = baseURL()+requestURI()
            Alamofire.request(url, method: method(), parameters: parameters(), encoding: encoding(), headers: headers()).responseJSON(completionHandler: completionHandler)
    }
}

protocol Request {

}

extension Request {
    func request() -&amp;gt; WBBaseRequest {
            complete {  (response)  in
//这里还有段代码造成循环引用
            }
       }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这时候问题就来了，正常情况下，应该使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt;就可以解决了，但是在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;protocol&lt;/code&gt;的时候，是无法使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt;的，然后就会有以下的报错
&lt;code class=&quot;highlighter-rouge&quot;&gt;'weak' may only be applied to class and class-bound protocol types, not 'Self'&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    func request() -&amp;gt; WBBaseRequest {
            complete {  (response) [weak self]  in //这个地方会报错 'weak' may only be applied to class and class-bound protocol types, not 'Self'
//这里还有段代码造成循环引用
            }
       }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接解决这个问题的方式是，将 &lt;code class=&quot;highlighter-rouge&quot;&gt;BaseRequest&lt;/code&gt;声明为只有类才可以使用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;protocol BaseRequest : class {
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后就可以愉快的使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[weak self]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;总结：
&lt;code class=&quot;highlighter-rouge&quot;&gt;weak&lt;/code&gt;只能用在类或者类的协议中，如果在协议扩展中使用了类而造成了循环引用，协议就需要指定必须是&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;才可以使用，&lt;code class=&quot;highlighter-rouge&quot;&gt;struct&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;enum&lt;/code&gt;是不会造成循环引用的
参考链接： 
&lt;a href=&quot;https://stackoverflow.com/questions/38841127/why-can-the-keyword-weak-only-be-applied-to-class-and-class-bound-protocol-typ&quot;&gt;Why can the keyword “weak” only be applied to class and class-bound protocol types&lt;/a&gt;
 &lt;a href=&quot;https://stackoverflow.com/questions/24066304/how-can-i-make-a-weak-protocol-reference-in-pure-swift-w-o-objc&quot;&gt;How can I make a weak protocol reference in ‘pure’ Swift (w/o @objc)&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 07 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/07/swift%E4%BD%BF%E7%94%A8protocol%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/07/swift%E4%BD%BF%E7%94%A8protocol%E7%9A%84%E6%97%B6%E5%80%99%E5%87%BA%E7%8E%B0%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>自己动手做Swift-Package-Manager</title>
        <description>&lt;p&gt;Swift Package Manager是苹果自家的包管理工具，他和iOS开发中的Cocoapod或者Carthage类似，但是我们可以从他&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;GitHub&lt;/a&gt;文档看到&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Note that at this time the Package Manager has no support for iOS, watchOS, or tvOS platforms.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;就是SPM是不支持  iOS, watchOS, or tvOS 平台，不过如果你想在不是mac OS的系统下使用swift，那就能用到SPM了。&lt;/p&gt;

&lt;p&gt;建立一个以下的目录&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;example[这是个文件夹，起什么名字都行]
├── Sources[这是个文件夹，默认这个名字，里面放你需要生成库的.swift文件]
│   ├── Person.swift
│   ├── Cat.swift
│   └── Dog.swift
└── Package.swift[必须这个名字]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在Package.swift中写上依赖的内容&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import PackageDescription

let package = Package(
    name: &quot;exmaple&quot; // 这里填你这个Package的名字
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后去github生成一个远程仓库，在example目录下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
$ git add *
$ git commit -m &quot;SPM example&quot;
$ git remote add origin git@github.com:xxx/example.git
$ git push -u origin master
$ git tag 1.0.0
$ git push --tags
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这时候就可以新建一个目录测试是否成功了&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir test
$ cd test
$ vim Package.swift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在Package.swift中输入&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import PackageDescription

let package = Package(
    name: &quot;test&quot;,
    targets: [],
    dependencies: [
        .Package(url: &quot;https://github.com/xxx/example.git&quot;, 
majorVersion: 1)
        ]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在 test 目录下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ swift build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这时候应该看到提示成功了，到这里已经完成了&lt;/p&gt;

&lt;h2 id=&quot;附带一些自己踩过的坑&quot;&gt;附带一些自己踩过的坑&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;如果example的目录下有很多别的文件夹，在&lt;code class=&quot;highlighter-rouge&quot;&gt;$ swift build&lt;/code&gt;的时候有可能会出现这个错误
&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unsupported&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiple&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;roots&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;example
├── Sources
│   ├── Person.swift
│   ├── Cat.swift
│   └── Dog.swift
└── Package.swift
│── a[不需要参与编译的文件]
│── b[不需要参与编译的文件]
└── Package.swift
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;出现这个错误的时候example/Package.swift 需要这样写：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import PackageDescription

let package = Package(
    name: &quot;exmaple&quot;, // 这里填你这个Package的名字
    exclude:[&quot;a&quot;,&quot;b&quot;]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果你这个库还依赖了别的库，还可以这样写：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import PackageDescription

let package = Package(
    name: &quot;exmaple&quot;, // 这里填你这个Package的名字
	dependencies: [
		.Package(url: &quot;https://github.com/depend/depend.git&quot;, majorVersion: 0)
	],
    exclude:[&quot;a&quot;,&quot;b&quot;]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;majorVersion只能是Int，我如果发布的不是整数tag怎么办？
可以换成选择版本范围，默认是根据当前范围最高的版本更新的
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import PackageDescription
let package = Package(
 name: &quot;test&quot;, 
 dependencies: [
          .Package(url: &quot;https://github.com/xxx/example.git&quot;,versions: Version(0, 0, 0)..&amp;lt;Version(1, .max, .max))]
 ]
)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;swift build了很久最后出现 error: reachedTimeLimit
这种情况我之前遇到过，具体是为什么导致当时没留意，但是你可以从这几个方面排查：
    &lt;ol&gt;
      &lt;li&gt;Package指定的版本是否有错&lt;/li&gt;
      &lt;li&gt;更新了新的版本，不能直接&lt;code class=&quot;highlighter-rouge&quot;&gt;$ swift build&lt;/code&gt;需要：
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rm -rf .build/
$ rm Package.resolved
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;dependencies是否有错&lt;/li&gt;
  &lt;li&gt;如果有引入c文件还需要特殊处理，因为我还没试过，只是在看文档的时候发现有，如果工程中有使用可以去&lt;a href=&quot;https://swift.org/package-manager/&quot;&gt;Swift.org&lt;/a&gt;和&lt;a href=&quot;https://github.com/apple/swift-package-manager&quot;&gt;GitHub&lt;/a&gt;了解更多&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 22 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/22/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%81%9ASwift-Package-Manager/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/22/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%81%9ASwift-Package-Manager/</guid>
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Xcode判断编译环境</title>
        <description>&lt;p&gt;有个需要区分是命令行的编译环境还是iOS的环境，这种情况下我用了&lt;code class=&quot;highlighter-rouge&quot;&gt;__APPLE__&lt;/code&gt;  、&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_IPHONE_SIMULATOR&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_OS_IPHONE&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;TARGET_OS_MAC&lt;/code&gt;，居然都没判断进去iOS的环境？最后用了一个没怎么见过的宏&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#if os(iOS)
#elseif os(Linux)//这个也可以判断是在Ubuntu环境
#elseif os(macOS)
#elseif os(watchOS)
#elseif os(tvOS)
#elseif os(Linux)
#else
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这种情况测试后发现，用swift&lt;code class=&quot;highlighter-rouge&quot;&gt;__APPLE__&lt;/code&gt;会没法判断，但是oc是没问题的&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/21/Xcode%E5%88%A4%E6%96%AD%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/21/Xcode%E5%88%A4%E6%96%AD%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83/</guid>
        
        <category>问题随笔</category>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Perfect-v2版本服务器升级v3</title>
        <description>&lt;p&gt;Perfect在11号的时候就发布了v3版本，v3版本开始支持swift 4，今天正好有空，把Perfect升级了一下，顺便写了个脚本方便集成环境，如果不清楚这个脚本是干嘛的，可以看下我之前的文章&lt;a href=&quot;http://www.jianshu.com/p/fc4971b72737&quot;&gt;如何在阿里云上部署Perfect服务器
&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;apt-get install make git clang libicu-dev libmysqlclient-dev libpq-dev sqlite3 libsqlite3-dev apache2-dev pkg-config libssl-dev libsasl2-dev libcurl4-openssl-dev uuid-dev wget
&lt;span class=&quot;c&quot;&gt;# 在lib下建立swift文件夹，将工具链放入文件夹中&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /lib/swift
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /lib/swift
&lt;span class=&quot;c&quot;&gt;# 下载4.0工具链&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget  https://swift.org/builds/swift-4.0-release/ubuntu1604/swift-4.0-RELEASE/swift-4.0-RELEASE-ubuntu16.04.tar.gz
&lt;span class=&quot;c&quot;&gt;# 下载签名&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget  https://swift.org/builds/swift-4.0-release/ubuntu1604/swift-4.0-RELEASE/swift-4.0-RELEASE-ubuntu16.04.tar.gz.sig
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; - https://swift.org/keys/all-keys.asc |  gpg &lt;span class=&quot;nt&quot;&gt;--import&lt;/span&gt; -
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--keyserver&lt;/span&gt; hkp://pool.sks-keyservers.net &lt;span class=&quot;nt&quot;&gt;--refresh-keys&lt;/span&gt; Swift
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt; swift-4.0-RELEASE-ubuntu16.04.tar.gz.sig
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf swift-4.0-RELEASE-ubuntu16.04.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这些所有完成之后，设置系统变量&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim /etc/profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt;最后一行写上
&lt;code class=&quot;highlighter-rouge&quot;&gt;export PATH=/lib/swift/swift-4.0-RELEASE-ubuntu16.04/usr/bin:$PATH&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;esc
$ :wq
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;设置完成之后需要重启服务器之后才会生效
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ reboot&lt;/code&gt;
上面的都完成之后去编译之前的服务器代码，会发现报错，因为之前的配置是&lt;code class=&quot;highlighter-rouge&quot;&gt;majorVersion:2&lt;/code&gt;，需要修改成&lt;code class=&quot;highlighter-rouge&quot;&gt;majorVersion:3&lt;/code&gt;
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/4AFAF1D2-EB80-4CFB-9A46-B4439EE8A96B.png&quot; alt=&quot;&quot; /&gt;
如果你之前用的数据库是&lt;code class=&quot;highlighter-rouge&quot;&gt;Perfect-MySQL&lt;/code&gt;，还需要将以前导入的库名修改，在Perfect v2，用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;import MySQL&lt;/code&gt;,现在改成了&lt;code class=&quot;highlighter-rouge&quot;&gt;import PerfectMySQL&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/19/Perfect-v2%E7%89%88%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%87%E7%BA%A7v3/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/19/Perfect-v2%E7%89%88%E6%9C%AC%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8D%87%E7%BA%A7v3/</guid>
        
        <category>Swift</category>
        
        <category>Perfect-Server</category>
        
        
      </item>
    
      <item>
        <title>又大一岁，先聊聊编程，再聊聊生活，最后再聊回编程</title>
        <description>&lt;p&gt;算起来已经23岁了，iOS开发1年5个月了。&lt;del&gt;在上一间公司加班加到曾经一度认为自己已经24-25岁，开发了2年半。&lt;/del&gt;
现在回想起来，从2016年5月3日开始，我已经是一名iOS开发了，从那时候每天朝9晚6的工作，变成了到后来朝9晚8，晚9，晚10…偶尔晚到凌晨1点的工作，我想现在每天编程的时间应该是在10-12小时左右吧，如果把睡觉的时间去掉，平时coding的时间都要比生活的时间长，很庆幸自己是个热爱编程的人，在过去的一年里，我特别的执着于提升自己的编程水平，现在看来，这一年的提升还算满意，一个人在开发路上摸索碰了很多璧，但是也弄了很多很有意思的东西，&lt;a href=&quot;https://github.com/Fidetro/FFDB&quot;&gt;FFDB&lt;/a&gt;应该是现在自己主力上维护的一个东西，虽然没什么人用233主要是一些以前同事在用，不过觉得ORM这个想法还是很nice的。我还记得开发FFDB2.0到3.0的那段时间，加班每天都是11-12点左右，但是回家了又很想重构到3.0（3.0是架构上很大的改动， 然后导致那一个星期都是3，4点，每天7点多又起床。。想想就觉得当时很疯狂。&lt;br /&gt;
生活上，过的很简单，编程睡觉编程睡觉，在今年3月份的时候曾经有过一段时间改变，那时候不知道怎么的，很想养一只猫，我觉得猫是一些比较独立的动物，当时就这么养了，刚养的时候还是很麻烦，怕他无聊，怕他到处大小便，怕他饿坏，后来还有了猫藓，而且那段时间加班加的很严重，周末早上他带看完病，下午又得去公司加班，连续上了3星期，特别是带了头套之后，当时猫太小，带着头套吃不了东西，每天很早起来喂他吃完，中午一下班就跑回家脱了头套看他吃饱了，又回公司，最后猫藓好了，猫也长大了，然后送了给高中的一个朋友。因为发现当时公司的加班情况，真的没有办法，太累了。&lt;br /&gt;
送完猫走之后，就想出去走走了，看看外边的世界，在外包做久了，感觉自己更加像是机器人，正好遇上@swift大会在深圳，见到了很多厉害的人，意识到自己的多么的渺小，但是更加的充满斗志。记得在上年，希望自己能开发个swift的app，虽然至今没有用swift开发过，刚好也应该算是碰上swift-server火的时候吧，平时的时间转而大部分花在开发perfect-server上，也因为这个，跟服务器搭边的前端呀，linux的一些常用的东西，都学了点，写了点html、css、js、shell，也顺便用swift写了swift的FFDB，摆脱了OC中的继承，转而用协议解决，挺满足的（尽管还是挺多没暴露的问题&lt;br /&gt;
今年感觉想要的想学的都有了，想想明年，也没有什么别的奢望了，感觉目前自己的水平不像以前一样提升的能快起来了，学的东西多，用起来学起来也容易乱，明年的话，要么会投入学细目前的领域，要么可能还是会再去把c捡起来吧，到时候再说吧。&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/14/%E5%8F%88%E5%A4%A7%E4%B8%80%E5%B2%81-%E5%85%88%E8%81%8A%E8%81%8A%E7%BC%96%E7%A8%8B-%E5%86%8D%E8%81%8A%E8%81%8A%E7%94%9F%E6%B4%BB-%E6%9C%80%E5%90%8E%E5%86%8D%E8%81%8A%E5%9B%9E%E7%BC%96%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/14/%E5%8F%88%E5%A4%A7%E4%B8%80%E5%B2%81-%E5%85%88%E8%81%8A%E8%81%8A%E7%BC%96%E7%A8%8B-%E5%86%8D%E8%81%8A%E8%81%8A%E7%94%9F%E6%B4%BB-%E6%9C%80%E5%90%8E%E5%86%8D%E8%81%8A%E5%9B%9E%E7%BC%96%E7%A8%8B/</guid>
        
        <category>Code-Life</category>
        
        
      </item>
    
      <item>
        <title>iPhoneX和iOS-11的适配你可能会踩到的坑</title>
        <description>&lt;p&gt;这几天都在看关于适配的问题，看WWDC的时候，哇这个功能好酷炫，API变得好方便，适配一定很方便，然后自己用的时候一看这些方法后面带着&lt;code class=&quot;highlighter-rouge&quot;&gt;API_AVAILABLE(ios(11.0),tvos(11.0))&lt;/code&gt;
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/2357E228-C575-46EF-AFEF-C28514BBD380.png&quot; alt=&quot;&quot; /&gt;
那么iPhone X究竟给我们带来了什么，导致适配变得麻烦呢？凶手就是这个刘海！
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/C4439A59-7652-49B4-A437-31D56F8744AA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在没有iPhoneX的时代，我们的statusBar是20pt，navigationBar是44pt，iPhone X的statusBar变成了44pt，navigationBar是44pt&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/0B24C760-58CD-40DB-B212-A1DF9A65ED40.png&quot; alt=&quot;&quot; /&gt;
为了方便我们适配，引入了&lt;code class=&quot;highlighter-rouge&quot;&gt;Safe Area&lt;/code&gt;的概念，根据苹果最新的&lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/overview/iphone-x/&quot;&gt;人机交互指南&lt;/a&gt;中我们布局UI时候应该在&lt;code class=&quot;highlighter-rouge&quot;&gt;Safe Area&lt;/code&gt;中而不应该超出&lt;code class=&quot;highlighter-rouge&quot;&gt;Safe Area&lt;/code&gt;的范围
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/764E4AA7-A3BE-4782-AACF-69E4EBE4CAF7.png&quot; alt=&quot;&quot; /&gt;
说完这些坑之后，也该讲讲怎么适配了，talk is cheap，show me the code！
 在iOS 11发布后，Masonry也更新了最新适配的方法，增加了以下属性方便我们适配&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuide&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideLeading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideTrailing&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideLeft&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideRight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideTop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideBottom&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideWidth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideHeight&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideCenterX&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MASViewAttribute&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mas_safeAreaLayoutGuideCenterY&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NS_AVAILABLE_IOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;但是这些属性只有在iOS 11中才可以使用，所以如果要适配从iOS 8开始，做下面的效果得写判断&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/E6C62EB6-71E0-4253-80FC-EFBEE4657537.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/C9391B5F-D768-48F7-B003-0E7964D48820.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];
    self.title = @&quot;First&quot;;
    UIView *colorView = [[UIView alloc]init];
    [self.view addSubview:colorView];
    colorView.backgroundColor = [UIColor redColor];
    [colorView mas_makeConstraints:^(MASConstraintMaker *make) {
        if (@available(iOS 11.0, *)) {
            make.top.mas_equalTo(self.view.mas_safeAreaLayoutGuideTop);
        } else {
            make.top.mas_equalTo(self.view.mas_top).mas_offset(64);
        }
        make.left.bottom.right.mas_equalTo(self.view);
    }];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@available(iOS 11.0, *)&lt;/code&gt;只是判断iOS系统版本，并不是判断是否iPhoneX，即时是iPhoneX以下，只要升到了iOS11也是可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;SafeArea&lt;/code&gt;的
在iOS 11之前，ViewController中的&lt;code class=&quot;highlighter-rouge&quot;&gt;automaticallyAdjustsScrollViewInsets&lt;/code&gt;是默认&lt;code class=&quot;highlighter-rouge&quot;&gt;YES&lt;/code&gt;的，这样会导致在有导航栏的情况下，第一个subView如果&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;的子类，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableView&lt;/code&gt;的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;TableView&lt;/code&gt;的本身不会做偏移，但是&lt;code class=&quot;highlighter-rouge&quot;&gt;UITableViewWrapperView&lt;/code&gt;会往下偏移到导航栏下面，让导航栏不会发生挡住TableView内容的情况。但是在iOS11后，&lt;code class=&quot;highlighter-rouge&quot;&gt;automaticallyAdjustsScrollViewInsets&lt;/code&gt;被废弃了，这个属性被移到了&lt;code class=&quot;highlighter-rouge&quot;&gt;UIScrollView&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;contentInsetAdjustmentBehavior&lt;/code&gt;，大家应该都遇过导航栏是透明的但是导航栏的Item是显示的需求，如果要做这种效果&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/5759B33B-9C3F-485A-801C-32C421E0023F.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://foolishtalk.oss-cn-shenzhen.aliyuncs.com/B7D623C5-CBF1-47A8-9D07-3EA684D8BBD9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor greenColor];
    [self.navigationController.navigationBar setBackgroundImage:[UIImage new]
                                                  forBarMetrics:UIBarMetricsDefault];
    self.navigationController.navigationBar.shadowImage = [UIImage new];
    self.navigationController.navigationBar.translucent = YES;
    if (@available(iOS 11.0, *)) {
        self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
    } else {
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
 
    [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.bottom.right.mas_equalTo(self.view);
        if (@available(iOS 11.0, *)) {
            if (((UIApplication *)[UIApplication performSelector:@selector(sharedApplication)]).keyWindow.safeAreaInsets.top &amp;gt; 0.0) {//iOS11而且是iPhone X
                make.top.mas_equalTo(self.view.mas_top).mas_offset(44);//这个也可以用    self.tableView.contentInset = UIEdgeInsetsMake(44, 0, 0, 0); make.top.mas_equalTo(self.view.mas_top);代替

            } else {//iOS11，但是不是iPhone X
                make.top.mas_equalTo(self.view.mas_top).mas_offset(20);
            }
        } else {//iOS11以下，而且不是iPhone X
            make.top.mas_equalTo(self.view.mas_top).mas_offset(20);
        }
    }];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;或者使用scrollView的contentInset&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor greenColor];
    [self.navigationController.navigationBar setBackgroundImage:[UIImage new]
                                                  forBarMetrics:UIBarMetricsDefault];
    self.navigationController.navigationBar.shadowImage = [UIImage new];
    self.navigationController.navigationBar.translucent = YES;
    
    if (@available(iOS 11.0, *)) {
        if (((UIApplication *)[UIApplication performSelector:@selector(sharedApplication)]).keyWindow.safeAreaInsets.top &amp;gt; 0.0) {//iOS11而且是iPhone X
            self.tableView.contentInset = UIEdgeInsetsMake(44, 0, 0, 0);
        } else {//iOS11，但是不是iPhone X
            self.tableView.contentInset = UIEdgeInsetsMake(20, 0, 0, 0);
        }
    } else {//iOS11以下，而且不是iPhone X
        self.tableView.contentInset = UIEdgeInsetsMake(20, 0, 0, 0);
        
    }
    if (@available(iOS 11.0, *)) {
        self.tableView.contentInsetAdjustmentBehavior = UIScrollViewContentInsetAdjustmentNever;
    } else {
        self.automaticallyAdjustsScrollViewInsets = NO;
    }
 
   [self.tableView mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.left.bottom.right.mas_equalTo(self.view);
    }];
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;总的来说，如果不出现很多这种导航栏隐藏的情况，适配应该工作量不会很大，如果TabBar和NavigationBar全是自定义的话，估计工作量会大很多。
附上参考链接和WWDC链接：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/cn/ios/update-apps-for-iphone-x/&quot;&gt;官方适配指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/fall2017/801/&quot;&gt;Designing for iPhone X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/fall2017/201/&quot;&gt;Building Apps for iPhone X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/204/&quot;&gt;Updating Your App for iOS 11&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/219/&quot;&gt;Modern User Interaction on iOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2017/412/&quot;&gt;Auto Layout Techniques in Interface Builder&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sat, 07 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/07/iPhoneX%E5%92%8CiOS-11%E7%9A%84%E9%80%82%E9%85%8D%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E5%88%B0%E7%9A%84%E5%9D%91/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/07/iPhoneX%E5%92%8CiOS-11%E7%9A%84%E9%80%82%E9%85%8D%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%B8%A9%E5%88%B0%E7%9A%84%E5%9D%91/</guid>
        
        <category>问题随笔</category>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
