I"2S<h1 id="ios多线程总结">iOS多线程总结</h1>

<h2 id="碎碎念">碎碎念</h2>
<p>这是2019的第一篇，虽然原来这篇大概在上年7、8月的时候就开始写了，但是因为各种生活+工作的事情，再加上对文章保持严谨的态度，在写之前写过很多测试代码，同时也顺便自己复习了一下，所以一直搁置到现在才写完。</p>

<h2 id="前言">前言</h2>
<p>最初写这一篇，是曾经被抛出过一个很泛的问题，“说说你知道的iOS多线程的知识点？”，对于一个iOS开发者来说，多线程绝对不陌生，而且经常会用到，但是遇到这个问题的时候，很容易想到什么就说什么，给别人一种“不熟悉”的感觉，所以借着这个原因，我也去梳理了一下关于多线程的知识，写下这篇文章，作为记录。</p>

<p>如果没有耐心看完，可以直接看<a href="https://www.foolishtalk.org/cloud/2019-2-16-iOS-thread.png">这里</a>。</p>

<h2 id="正文">正文</h2>
<p>聊到多线程，肯定少不了要说说进程和线程之间的关系。</p>

<h3 id="什么是进程">什么是进程？</h3>
<p>在操作系统中，开启一个任务会开启一个进程。<br />
在iOS上，一个app对应一个进程。每个进程运行在其专用且受保护的内存空间中。<br />
例如在mac上打开终端，然后再输入<code class="language-plaintext highlighter-rouge">ps</code>就会看到开启了一条<code class="language-plaintext highlighter-rouge">bash</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MacdeMacBook-Pro:~ Fidetro$ ps
  PID TTY           TIME CMD
 8329 ttys000    0:00.03 -bash
</code></pre></div></div>
<p>如果再开打开一个终端，再次输入<code class="language-plaintext highlighter-rouge">ps</code>就会看到开启了两个<code class="language-plaintext highlighter-rouge">bash</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MacdeMacBook-Pro:~ Karim$ ps
  PID TTY           TIME CMD
 8329 ttys000    0:00.03 -bash
 8651 ttys001    0:00.02 -bash
</code></pre></div></div>
<p>一个进程中又至少会开启一条线程，在iOS中，我们把那条线程叫做主线程。一个进程可以开启多条线程。</p>
<h3 id="什么是线程">什么是线程？</h3>

<blockquote>
  <p>线程是指给代码单独执行的通道。  —-翻译自<a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/ConcurrencyProgrammingGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008091-CH1-SW1">苹果文档</a></p>
</blockquote>

<p>iOS中提供了4个方案让我们使用多线程，分别是：</p>
<ul>
  <li>Pthreads</li>
  <li>NSThread</li>
  <li>GCD</li>
  <li>NSOperation</li>
</ul>

<p>这篇主要是讲GCD，其他方案的资料，可以参考总结的图。</p>

<h3 id="gcd">GCD</h3>
<p>GCD是一套C语言编写的接口，其代码也是<a href="https://apple.github.io/swift-corelibs-libdispatch/">开源</a>,它为我们提供多线程技术，GCD中最核心的两个概念，任务和队列。</p>

<p>在iOS中使用GCD创建队列，调用<code class="language-plaintext highlighter-rouge">dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);</code><br />
第一个参数代表队列的名字，第二参数代表队列的类型，使用<code class="language-plaintext highlighter-rouge">DISPATCH_QUEUE_SERIAL</code>创建串行队列，使用<code class="language-plaintext highlighter-rouge">DISPATCH_QUEUE_CONCURRENT</code>创建并行队列。</p>

<h4 id="串行队列">串行队列</h4>
<p><img src="https://www.foolishtalk.org/cloud/2019-2-14-sync.png" alt="" /><br />
串行队列，任务按照进入顺序执行。遵循FIFO（先进先出）原则。</p>

<h4 id="并行队列">并行队列</h4>
<p><img src="https://www.foolishtalk.org/cloud/2019-2-14-async.png" alt="" /><br />
并行队列，任务会并行执行，无法保证任务完成的时机是添加的顺序。</p>

<h4 id="异步">异步</h4>
<p>异步执行不会等待内部代码全部执行完然后返回，而是直接往下执行。</p>

<h4 id="同步">同步</h4>
<p>同步执行会等待内部代码执行完毕之后，再往下执行。</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: left">同步</th>
      <th style="text-align: left">异步</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">串行队列</td>
      <td style="text-align: left">不会创建新的线程，而是在当前线程执行。任务按顺序执行，等待内部代码执行完毕后往下执行。</td>
      <td style="text-align: left">调用<code class="language-plaintext highlighter-rouge">dispatch_queue_create()</code>会创建新的线程，任务按顺序执行，不会等待内部代码全部执行完然后返回，而是直接往下执行。</td>
    </tr>
    <tr>
      <td style="text-align: center">并行队列</td>
      <td style="text-align: left">与串行同步一致。</td>
      <td style="text-align: left">调用<code class="language-plaintext highlighter-rouge">dispatch_async()</code>会创建新的线程，任务在不同的线程下执行。</td>
    </tr>
  </tbody>
</table>

<h4 id="dispatch_after">dispatch_after</h4>

<p><code class="language-plaintext highlighter-rouge">dispatch_after()</code>是iOS最常用的延时方法。</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
        <span class="c1">//两秒后执行</span>
    <span class="p">});</span>
</code></pre></div></div>

<h4 id="dispatch_group_t">dispatch_group_t</h4>

<p><code class="language-plaintext highlighter-rouge">dispatch_group_t</code>用来监听多个异步任务的完成。<br />
GCD提供了两种方式去获取<code class="language-plaintext highlighter-rouge">dispatch_group_t</code>完成的回调。<br />
第一种是<code class="language-plaintext highlighter-rouge">dispatch_group_notify()</code>，不会阻塞当前线程，在所有任务完成后，回调到block；<br />
第二种是<code class="language-plaintext highlighter-rouge">dispatch_group_wait()</code>，会阻塞当前线程，等待所有任务完成后才往下走，<strong><code class="language-plaintext highlighter-rouge">dispatch_group_wait()</code>不可以在主线程调用，否则会造成死锁。</strong></p>

<p><code class="language-plaintext highlighter-rouge">dispatch_group_notify()</code>的例子如下：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="n">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
    <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(){</span>
        <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(){</span>
            <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
            <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                <span class="n">NSLog</span><span class="p">(</span><span class="s">@"1"</span><span class="p">);</span>
                <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">});</span>
    <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(){</span>
        <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(){</span>
            <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
            <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                <span class="n">NSLog</span><span class="p">(</span><span class="s">@"2"</span><span class="p">);</span>
                <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">});</span>
    
    <span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(){</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"3"</span><span class="p">);</span>
    <span class="p">});</span>

</code></pre></div></div>

<p>输出结果：</p>
<pre><code class="language-clang">2018-12-19 15:12:27.770146+0800 GCD[70391:2895561] 2
2018-12-19 15:12:29.220584+0800 GCD[70391:2895561] 1
2018-12-19 15:12:29.220987+0800 GCD[70391:2895561] 3
</code></pre>

<p><code class="language-plaintext highlighter-rouge">dispatch_group_wait()</code>例子如下：</p>
<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dispatch_queue_t</span> <span class="n">asyncQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">"com.group.queue"</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">asyncQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
        <span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(){</span>
            <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(){</span>
                <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
                <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"1"</span><span class="p">);</span>
                    <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
                <span class="p">});</span>
            <span class="p">});</span>
        <span class="p">});</span>
        <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">(){</span>
            <span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(){</span>
                <span class="n">dispatch_group_enter</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
                <span class="n">dispatch_after</span><span class="p">(</span><span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="kt">int64_t</span><span class="p">)(</span><span class="mi">0</span><span class="p">.</span><span class="mi">5</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">)),</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
                    <span class="n">NSLog</span><span class="p">(</span><span class="s">@"2"</span><span class="p">);</span>
                    <span class="n">dispatch_group_leave</span><span class="p">(</span><span class="n">group</span><span class="p">);</span>
                <span class="p">});</span>
            <span class="p">});</span>
        <span class="p">});</span>
        <span class="n">dispatch_group_wait</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">DISPATCH_TIME_FOREVER</span><span class="p">);</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"3"</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div></div>
<p>输出结果：</p>
<pre><code class="language-clang">2019-02-16 12:21:12.300569+0800 GCD[79234:3427553] 2
2019-02-16 12:21:13.751251+0800 GCD[79234:3427553] 1
2019-02-16 12:21:13.751419+0800 GCD[79234:3427633] 3
</code></pre>

<h4 id="dispatch_barrier_async">dispatch_barrier_async</h4>

<p><code class="language-plaintext highlighter-rouge">dispatch_barrier</code>相当于一个“栅栏”的作用，在相同的队列中，会先执行在<code class="language-plaintext highlighter-rouge">dispatch_barrier</code>之前的任务，然后<code class="language-plaintext highlighter-rouge">dispatch_barrier</code>之后的任务，都需要等待<code class="language-plaintext highlighter-rouge">dispatch_barrier</code>完成之后，才会执行block里面的内容。</p>

<p>另外苹果文档中有写道：</p>
<blockquote>
  <p>The queue you specify should be a concurrent queue that you create yourself using the dispatch_queue_create function. If the queue you pass to this function is a serial queue or one of the global concurrent queues, this function behaves like the dispatch_sync function.</p>
</blockquote>

<p>使用<code class="language-plaintext highlighter-rouge">dispatch_barrier_async</code>的时候，需要自定义队列才有效，如果使用全局队列或者同步队列，效果和<code class="language-plaintext highlighter-rouge">dispatch_sync()</code>同步函数一样。</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">//防止文件读写冲突，可以创建一个串行队列，操作都在这个队列中进行，没有更新数据读用并行，写用串行。</span>
    <span class="n">dispatch_queue_t</span> <span class="n">dataQueue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="s">"com.karim.gcd.dataqueue"</span><span class="p">,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dataQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="p">[</span><span class="n">NSThread</span> <span class="nf">sleepForTimeInterval</span><span class="p">:</span><span class="mi">2</span><span class="p">.</span><span class="n">f</span><span class="p">];</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"read data 1"</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dataQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"read data 2"</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="c1">//等待前面的都完成，在执行barrier后面的</span>
    <span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">dataQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"write data 1"</span><span class="p">);</span>
        <span class="p">[</span><span class="n">NSThread</span> <span class="nf">sleepForTimeInterval</span><span class="p">:</span><span class="mi">1</span><span class="p">];</span>
    <span class="p">});</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dataQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="p">[</span><span class="n">NSThread</span> <span class="nf">sleepForTimeInterval</span><span class="p">:</span><span class="mi">1</span><span class="p">.</span><span class="n">f</span><span class="p">];</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"read data 3"</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="n">dispatch_async</span><span class="p">(</span><span class="n">dataQueue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
        <span class="n">NSLog</span><span class="p">(</span><span class="s">@"read data 4"</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre></div></div>
<p>输出结果如下：</p>
<pre><code class="language-clang">2018-12-19 15:26:50.297477+0800 GCD[70716:2943544] read data 2
2018-12-19 15:26:52.302570+0800 GCD[70716:2943541] read data 1
2018-12-19 15:26:52.302925+0800 GCD[70716:2943541] write data 1
2018-12-19 15:26:53.306632+0800 GCD[70716:2943544] read data 4
2018-12-19 15:26:54.307808+0800 GCD[70716:2943541] read data 3
</code></pre>

<h3 id="总结">总结</h3>
<p>我把一些关于多线程的知识点整理在这个图里了，如果有遗漏，可以联系我，我会即时补充上去。<br />
<img src="https://www.foolishtalk.org/cloud/2019-2-16-iOS-thread.png" alt="" /></p>

<h3 id="参考">参考</h3>

<p><a href="https://github.com/ming1016/study/wiki/iOS%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B">iOS并发编程</a></p>

<p><a href="http://liuyanwei.jumppo.com/2015/08/19/ios-ThreadAndAsynchronization.html">ios的线程和同步异步操作</a></p>
:ET