I",<h1 id="前言">前言</h1>
<p>随着自己开发的个人项目越来越多，也给自己制定了一些git的规范，例如<code class="language-plaintext highlighter-rouge">git commit</code>提交日志的规范。<br />
因为我的个人项目都是放在GitHub上，我在给项目开发新需求的时候，会新建一个issue，GitHub会给这个issue，创建一个<code class="language-plaintext highlighter-rouge">#id</code>(不知道正确叫法是什么)，然后在开发新需求的时候，会把分支名称改成<code class="language-plaintext highlighter-rouge">#id</code>，这样就可以方便的跟踪项目后续问题回溯，同时还会在提交日志加上<code class="language-plaintext highlighter-rouge">#id</code>，类似这样的格式：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#id-问题/功能描述
</code></pre></div></div>
<p>这样的格式，可以在GitHub的页面直接跳转到对应的issue或者pull request，非常方便。<br />
但是每次都得手动加上<code class="language-plaintext highlighter-rouge">#id-</code>，这样会比较麻烦，所以我想到了用git-hooks，在提交日志的时候，自动加上<code class="language-plaintext highlighter-rouge">#id-</code>，这样就可以让我们不用手动加上<code class="language-plaintext highlighter-rouge">#id-</code>了。</p>

<h1 id="正文">正文</h1>
<p>关于git-hooks，我就不多说了，可以看看这里对git-hooks的<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">介绍</a>,如果只想把hook的规则单独使用在某个项目中，可以在项目的<code class="language-plaintext highlighter-rouge">.git/hooks</code>下创建hook脚本。<br />
如果想要在全局使用，有两种方式<code class="language-plaintext highlighter-rouge">init.templatedir</code>或者<code class="language-plaintext highlighter-rouge">core.hooksPath</code>。</p>

<h2 id="inittemplatedir">init.templatedir</h2>
<p>这种方式会在你的项目<code class="language-plaintext highlighter-rouge">git init</code>的时候，自动创建一个hooks文件夹，然后把所有的hook脚本都放在这个文件夹下，如果是旧的项目就需要再次执行<code class="language-plaintext highlighter-rouge">git init</code>才会生效。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#创建hooks文件夹
mkdir -p ~/.git-templates/hooks
#配置全局git templates
git config --global init.templatedir '~/.git-templates'  
#确保脚本可以执行
chmod a+x ~/.git-hooksPath/hooks/xxx
</code></pre></div></div>
<p>将hook的脚本放入<code class="language-plaintext highlighter-rouge">~/.git-templates/hooks</code>中即可。</p>

<h2 id="corehookspath">core.hooksPath</h2>
<p>这种方式需要git的版本在2.9+以上才能正常使用，比第一种方式方便在旧项目不需要再次init就可以使用。</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#创建hooks文件夹
mkdir -p ~/.git-hooksPath/hooks
#配置全局git hooksPath
git config --global core.hooksPath ~/.git-hooksPath/hooks  
#确保脚本可以执行
chmod a+x ~/.git-hooksPath/hooks/xxx
</code></pre></div></div>
<p>将hook的脚本放入<code class="language-plaintext highlighter-rouge">~/.git-hooksPath/hooks</code>中即可。</p>

<p>如果有个别项目不需要使用全局的git hooks，可以在项目的根目录下重新配置git hooksPath，比如：</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git config core.hooksPath .git/hooks 
</code></pre></div></div>

<h1 id="参考">参考</h1>
<p><a href="https://stackoverflow.com/questions/2293498/applying-a-git-post-commit-hook-to-all-current-and-future-repositories">Applying a git post-commit hook to all current and future repositories</a> <br />
<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90">Git 钩子</a></p>
:ET